global:
  # -- Overrides the Docker registry globally for all images
  imageRegistry: null

  # To help compatibility with other charts which use global.imagePullSecrets.
  # Allow either an array of {name: pullSecret} maps (k8s-style), or an array of strings (more common helm-style).
  # Can be tempalted.
  # global:
  #   imagePullSecrets:
  #   - name: pullSecret1
  #   - name: pullSecret2
  # or
  # global:
  #   imagePullSecrets:
  #   - pullSecret1
  #   - pullSecret2
  imagePullSecrets: []

rbac:
  create: true
  ## Use an existing ClusterRole/Role (depending on rbac.namespaced false/true)
  # useExistingRole: name-of-some-role
  # useExistingClusterRole: name-of-some-clusterRole
  pspEnabled: false
  pspUseAppArmor: false
  namespaced: false
  extraRoleRules: []
  # - apiGroups: []
  #   resources: []
  #   verbs: []
  extraClusterRoleRules: []
  # - apiGroups: []
  #   resources: []
  #   verbs: []
serviceAccount:
  create: true
  name:
  nameTest:
  ## ServiceAccount labels.
  labels: {}
## Service account annotations. Can be templated.
#  annotations:
#    eks.amazonaws.com/role-arn: arn:aws:iam::123456789000:role/iam-role-name-here
  autoMount: true

replicas: 1

## Create a headless service for the deployment
headlessService: false

## Create HorizontalPodAutoscaler object for deployment type
#
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPU: "60"
  targetMemory: ""
  behavior: {}

## See `kubectl explain poddisruptionbudget.spec` for more
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
podDisruptionBudget: {}
#  apiVersion: ""
#  minAvailable: 1
#  maxUnavailable: 1

## See `kubectl explain deployment.spec.strategy` for more
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
deploymentStrategy:
  type: RollingUpdate

readinessProbe:
  httpGet:
    path: /api/health
    port: 3000

livenessProbe:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 60
  timeoutSeconds: 30
  failureThreshold: 10

## Use an alternate scheduler, e.g. "stork".
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
# schedulerName: "default-scheduler"

image:
  # -- The Docker registry
  registry: docker.io
  # -- Docker image repository
  repository: grafana/grafana
  # Overrides the Grafana image tag whose default is the chart appVersion
  tag: ""
  sha: ""
  pullPolicy: IfNotPresent

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## Can be templated.
  ##
  pullSecrets: []
  #   - myRegistrKeySecretName

testFramework:
  enabled: true
  image:
    # -- The Docker registry
    registry: docker.io
    repository: bats/bats
    tag: "v1.4.1"
  imagePullPolicy: IfNotPresent
  securityContext: {}

# dns configuration for pod
dnsPolicy: ~
dnsConfig: {}
  # nameservers:
  #   - 8.8.8.8
  #   options:
  #   - name: ndots
  #     value: "2"
  #   - name: edns0

securityContext:
  runAsNonRoot: true
  runAsUser: 472
  runAsGroup: 472
  fsGroup: 472

containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  seccompProfile:
    type: RuntimeDefault

# Enable creating the grafana configmap
createConfigmap: true

# Extra configmaps to mount in grafana pods
# Values are templated.
extraConfigmapMounts: []
  # - name: certs-configmap
  #   mountPath: /etc/grafana/ssl/
  #   subPath: certificates.crt # (optional)
  #   configMap: certs-configmap
  #   readOnly: true


extraEmptyDirMounts: []
  # - name: provisioning-notifiers
  #   mountPath: /etc/grafana/provisioning/notifiers


# Apply extra labels to common labels.
extraLabels: {}

## Assign a PriorityClassName to pods if set
# priorityClassName:

downloadDashboardsImage:
  # -- The Docker registry
  registry: docker.io
  repository: curlimages/curl
  tag: 7.85.0
  sha: ""
  pullPolicy: IfNotPresent

downloadDashboards:
  env: {}
  envFromSecret: ""
  resources: {}
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    seccompProfile:
      type: RuntimeDefault
  envValueFrom: {}
  #  ENV_NAME:
  #    configMapKeyRef:
  #      name: configmap-name
  #      key: value_key

## Pod Annotations
# podAnnotations: {}

## Pod Labels
# podLabels: {}

podPortName: grafana
gossipPortName: gossip
## Deployment annotations
# annotations: {}

## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  enabled: true
  type: ClusterIP
  loadBalancerIP: ""
  loadBalancerClass: ""
  loadBalancerSourceRanges: []
  port: 80
  targetPort: 3000
    # targetPort: 4181 To be used with a proxy extraContainer
  ## Service annotations. Can be templated.
  annotations: {}
  labels: {}
  portName: service
  # Adds the appProtocol field to the service. This allows to work with istio protocol selection. Ex: "http" or "tcp"
  appProtocol: ""

serviceMonitor:
  ## If true, a ServiceMonitor CRD is created for a prometheus operator
  ## https://github.com/coreos/prometheus-operator
  ##
  enabled: false
  path: /metrics
  #  namespace: monitoring  (defaults to use the namespace this chart is deployed to)
  labels: {}
  interval: 30s
  scheme: http
  tlsConfig: {}
  scrapeTimeout: 30s
  relabelings: []
  metricRelabelings: []
  targetLabels: []

extraExposePorts: []
 # - name: keycloak
 #   port: 8080
 #   targetPort: 8080

# overrides pod.spec.hostAliases in the grafana deployment's pods
hostAliases: []
  # - ip: "1.2.3.4"
  #   hostnames:
  #     - "my.host.com"

ingress:
  enabled: false
  # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
  # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
  # ingressClassName: nginx
  # Values can be templated
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  labels: {}
  path: /

  # pathType is only for k8s >= 1.1=
  pathType: Prefix

  hosts:
    - chart-example.local
  ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
  extraPaths: []
  # - path: /*
  #   backend:
  #     serviceName: ssl-redirect
  #     servicePort: use-annotation
  ## Or for k8s > 1.19
  # - path: /*
  #   pathType: Prefix
  #   backend:
  #     service:
  #       name: ssl-redirect
  #       port:
  #         name: use-annotation


  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
#  limits:
#    cpu: 100m
#    memory: 128Mi
#  requests:
#    cpu: 100m
#    memory: 128Mi

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
#
nodeSelector: {}

## Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Affinity for pod assignment (evaluated as template)
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Topology Spread Constraints
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
##
topologySpreadConstraints: []

## Additional init containers (evaluated as template)
## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
##
extraInitContainers: []

## Enable an Specify container in extraContainers. This is meant to allow adding an authentication proxy to a grafana pod
extraContainers: ""
# extraContainers: |
# - name: proxy
#   image: quay.io/gambol99/keycloak-proxy:latest
#   args:
#   - -provider=github
#   - -client-id=
#   - -client-secret=
#   - -github-org=<ORG_NAME>
#   - -email-domain=*
#   - -cookie-secret=
#   - -http-address=http://0.0.0.0:4181
#   - -upstream-url=http://127.0.0.1:3000
#   ports:
#     - name: proxy-web
#       containerPort: 4181

## Volumes that can be used in init containers that will not be mounted to deployment pods
extraContainerVolumes: []
#  - name: volume-from-secret
#    secret:
#      secretName: secret-to-mount
#  - name: empty-dir-volume
#    emptyDir: {}

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  type: pvc
  enabled: true
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  # annotations: {}
  finalizers:
    - kubernetes.io/pvc-protection
  # selectorLabels: {}
  ## Sub-directory of the PV to mount. Can be templated.
  # subPath: ""
  ## Name of an existing PVC. Can be templated.
  # existingClaim:
  ## Extra labels to apply to a PVC.
  extraPvcLabels: {}

  ## If persistence is not enabled, this allows to mount the
  ## local storage in-memory to improve performance
  ##
  inMemory:
    enabled: false
    ## The maximum usage on memory medium EmptyDir would be
    ## the minimum value between the SizeLimit specified
    ## here and the sum of memory limits of all containers in a pod
    ##
    # sizeLimit: 300Mi

initChownData:
  ## If false, data ownership will not be reset at startup
  ## This allows the grafana-server to be run with an arbitrary user
  ##
  enabled: true

  ## initChownData container image
  ##
  image:
    # -- The Docker registry
    registry: docker.io
    repository: library/busybox
    tag: "1.31.1"
    sha: ""
    pullPolicy: IfNotPresent

  ## initChownData resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}
  #  limits:
  #    cpu: 100m
  #    memory: 128Mi
  #  requests:
  #    cpu: 100m
  #    memory: 128Mi
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      add:
        - CHOWN

# Administrator credentials when not using an existing secret (see below)
adminUser: admin
adminPassword: admin

# Use an existing secret for the admin user.
admin:
  ## Name of the secret. Can be templated.
  existingSecret: ""
  userKey: admin-user
  passwordKey: admin-password

## Define command to be executed at startup by grafana container
## Needed if using `vault-env` to manage secrets (ref: https://banzaicloud.com/blog/inject-secrets-into-pods-vault/)
## Default is "run.sh" as defined in grafana's Dockerfile
# command:
# - "sh"
# - "/run.sh"

## Optionally define args if command is used
## Needed if using `hashicorp/envconsul` to manage secrets
## By default no arguments are set
# args:
# - "-secret"
# - "secret/grafana"
# - "./grafana"

## Extra environment variables that will be pass onto deployment pods
##
## to provide grafana with access to CloudWatch on AWS EKS:
## 1. create an iam role of type "Web identity" with provider oidc.eks.* (note the provider for later)
## 2. edit the "Trust relationships" of the role, add a line inside the StringEquals clause using the
## same oidc eks provider as noted before (same as the existing line)
## also, replace NAMESPACE and prometheus-operator-grafana with the service account namespace and name
##
##  "oidc.eks.us-east-1.amazonaws.com/id/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:sub": "system:serviceaccount:NAMESPACE:prometheus-operator-grafana",
##
## 3. attach a policy to the role, you can use a built in policy called CloudWatchReadOnlyAccess
## 4. use the following env: (replace 123456789000 and iam-role-name-here with your aws account number and role name)
##
## env:
##   AWS_ROLE_ARN: arn:aws:iam::123456789000:role/iam-role-name-here
##   AWS_WEB_IDENTITY_TOKEN_FILE: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
##   AWS_REGION: us-east-1
##
## 5. uncomment the EKS section in extraSecretMounts: below
## 6. uncomment the annotation section in the serviceAccount: above
## make sure to replace arn:aws:iam::123456789000:role/iam-role-name-here with your role arn

env: {}

## "valueFrom" environment variable references that will be added to deployment pods. Name is templated.
## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#envvarsource-v1-core
## Renders in container spec as:
##   env:
##     ...
##     - name: <key>
##       valueFrom:
##         <value rendered as YAML>
envValueFrom: {}
  #  ENV_NAME:
  #    configMapKeyRef:
  #      name: configmap-name
  #      key: value_key

## The name of a secret in the same kubernetes namespace which contain values to be added to the environment
## This can be useful for auth tokens, etc. Value is templated.
envFromSecret: ""

## Sensible environment variables that will be rendered as new secret object
## This can be useful for auth tokens, etc.
## If the secret values contains "{{", they'll need to be properly escaped so that they are not interpreted by Helm
## ref: https://helm.sh/docs/howto/charts_tips_and_tricks/#using-the-tpl-function
envRenderSecret: {}

## The names of secrets in the same kubernetes namespace which contain values to be added to the environment
## Each entry should contain a name key, and can optionally specify whether the secret must be defined with an optional key.
## Name is templated.
envFromSecrets: []
## - name: secret-name
##   optional: true

## The names of conifgmaps in the same kubernetes namespace which contain values to be added to the environment
## Each entry should contain a name key, and can optionally specify whether the configmap must be defined with an optional key.
## Name is templated.
## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#configmapenvsource-v1-core
envFromConfigMaps: []
## - name: configmap-name
##   optional: true

# Inject Kubernetes services as environment variables.
# See https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/#environment-variables
enableServiceLinks: true

## Additional grafana server secret mounts
# Defines additional mounts with secrets. Secrets must be manually created in the namespace.
extraSecretMounts: []
  # - name: secret-files
  #   mountPath: /etc/secrets
  #   secretName: grafana-secret-files
  #   readOnly: true
  #   subPath: ""
  #
  # for AWS EKS (cloudwatch) use the following (see also instruction in env: above)
  # - name: aws-iam-token
  #   mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
  #   readOnly: true
  #   projected:
  #     defaultMode: 420
  #     sources:
  #       - serviceAccountToken:
  #           audience: sts.amazonaws.com
  #           expirationSeconds: 86400
  #           path: token
  #
  # for CSI e.g. Azure Key Vault use the following
  # - name: secrets-store-inline
  #  mountPath: /run/secrets
  #  readOnly: true
  #  csi:
  #    driver: secrets-store.csi.k8s.io
  #    readOnly: true
  #    volumeAttributes:
  #      secretProviderClass: "akv-grafana-spc"
  #    nodePublishSecretRef:                       # Only required when using service principal mode
  #       name: grafana-akv-creds                  # Only required when using service principal mode

## Additional grafana server volume mounts
# Defines additional volume mounts.
extraVolumeMounts: []
  # - name: extra-volume-0
  #   mountPath: /mnt/volume0
  #   readOnly: true
  # - name: extra-volume-1
  #   mountPath: /mnt/volume1
  #   readOnly: true
  # - name: grafana-secrets
  #   mountPath: /mnt/volume2

## Additional Grafana server volumes
extraVolumes: []
  # - name: extra-volume-0
  #   existingClaim: volume-claim
  # - name: extra-volume-1
  #   hostPath:
  #     path: /usr/shared/
  #     type: ""
  # - name: grafana-secrets
  #   csi:
  #     driver: secrets-store.csi.k8s.io
  #     readOnly: true
  #     volumeAttributes:
  #       secretProviderClass: "grafana-env-spc"

## Container Lifecycle Hooks. Execute a specific bash command or make an HTTP request
lifecycleHooks: {}
  # postStart:
  #   exec:
  #     command: []

## Pass the plugins you want installed as a list.
##
plugins: []
  # - digrich-bubblechart-panel
  # - grafana-clock-panel
  ## You can also use other plugin download URL, as long as they are valid zip files,
  ## and specify the name of the plugin after the semicolon. Like this:
  # - https://grafana.com/api/plugins/marcusolsson-json-datasource/versions/1.3.2/download;marcusolsson-json-datasource

## Configure grafana datasources
## ref: http://docs.grafana.org/administration/provisioning/#datasources
##
datasources: 
  datasources.yaml:
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus-server/
      isDefault: true
    - name: OpenTelemetry
      type: opentelemetry
      url: http://opentelemetry-collector:4317
      isDefault: false
    - name: Loki
      type: loki
      access: proxy
      url: http://loki:3100
      jsonData:
        timeout: 60
        maxLines: 1000
        derivedFields:
          # Field with internal link pointing to data source in Grafana.
          # datasourceUid value can be anything, but it should be unique across all defined data source uids.
          - datasourceUid: tempo
            matcherRegex: "traceID=(\\w+)"
            name: TraceID
            # url will be interpreted as query for the datasource
            url: '$${__value.raw}'
            # optional for URL Label to set a custom display label for the link.
            urlDisplayLabel: 'View Trace'
    - name: tempo
      type: tempo
      url: http://tempo:3100
      isDefault: false
      access: proxy
      basicAuth: false
      jsonData:
        tracesToLogsV2:
          # Field with an internal link pointing to a logs data source in Grafana.
          # datasourceUid value must match the uid value of the logs data source.
          datasourceUid: 'Loki'
          spanStartTimeShift: '1h'
          spanEndTimeShift: '-1h'
          tags: [
            { key: 'app'}
          ]
          filterByTraceID: false
          filterBySpanID: true
          customQuery: false
          #query: '{${__tags}} |="${__span.traceId}"'
        tracesToMetrics:
          datasourceUid: 'Prometheus'
          spanStartTimeShift: '1h'
          spanEndTimeShift: '-1h'
          tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
          queries:
            - name: 'Sample query'
              query: 'sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))'
        serviceMap:
          datasourceUid: 'Prometheus'
        nodeGraph:
          enabled: true
        search:
          hide: false
        lokiSearch:
          datasourceUid: 'Loki'
        traceQuery:
          timeShiftEnabled: true
          spanStartTimeShift: '1h'
          spanEndTimeShift: '-1h'
        spanBar:
          type: 'Tag'
          tag: 'http.path'
#    - name: CloudWatch
#      type: cloudwatch
#      access: proxy
#      uid: cloudwatch
#      editable: false
#      jsonData:
#        authType: default
#        defaultRegion: us-east-1
#    deleteDatasources: []
#    - name: Prometheus

## Configure grafana alerting (can be templated)
## ref: http://docs.grafana.org/administration/provisioning/#alerting
##
alerting: {}
  # rules.yaml:
  #   apiVersion: 1
  #   groups:
  #     - orgId: 1
  #       name: '{{ .Chart.Name }}_my_rule_group'
  #       folder: my_first_folder
  #       interval: 60s
  #       rules:
  #         - uid: my_id_1
  #           title: my_first_rule
  #           condition: A
  #           data:
  #             - refId: A
  #               datasourceUid: '-100'
  #               model:
  #                 conditions:
  #                   - evaluator:
  #                       params:
  #                         - 3
  #                       type: gt
  #                     operator:
  #                       type: and
  #                     query:
  #                       params:
  #                         - A
  #                     reducer:
  #                       type: last
  #                     type: query
  #                 datasource:
  #                   type: __expr__
  #                   uid: '-100'
  #                 expression: 1==0
  #                 intervalMs: 1000
  #                 maxDataPoints: 43200
  #                 refId: A
  #                 type: math
  #           dashboardUid: my_dashboard
  #           panelId: 123
  #           noDataState: Alerting
  #           for: 60s
  #           annotations:
  #             some_key: some_value
  #           labels:
  #             team: sre_team_1
  # contactpoints.yaml:
  #   secret:
  #     apiVersion: 1
  #     contactPoints:
  #       - orgId: 1
  #         name: cp_1
  #         receivers:
  #           - uid: first_uid
  #             type: pagerduty
  #             settings:
  #               integrationKey: XXX
  #               severity: critical
  #               class: ping failure
  #               component: Grafana
  #               group: app-stack
  #               summary: |
  #                 {{ `{{ include "default.message" . }}` }}

## Configure notifiers
## ref: http://docs.grafana.org/administration/provisioning/#alert-notification-channels
##
notifiers: {}
#  notifiers.yaml:
#    notifiers:
#    - name: email-notifier
#      type: email
#      uid: email1
#      # either:
#      org_id: 1
#      # or
#      org_name: Main Org.
#      is_default: true
#      settings:
#        addresses: an_email_address@example.com
#    delete_notifiers:

## Configure grafana dashboard providers
## ref: http://docs.grafana.org/administration/provisioning/#dashboards
##
## `path` must be /var/lib/grafana/dashboards/<provider_name>
##
dashboardProviders: 
  dashboardproviders.yaml:
   apiVersion: 1
   providers:
   - name: 'default'
     orgId: 1
     folder: ''
     type: file
     disableDeletion: false
     editable: true
     options:
       path: /var/lib/grafana/dashboards/default

## Configure grafana dashboard to import
## NOTE: To use dashboards you must also enable/configure dashboardProviders
## ref: https://grafana.com/dashboards
##
## dashboards per provider, use provider name as key.
##
dashboards:
  default:
  #   some-dashboard:
  #     json: |
  #       $RAW_JSON
  #   custom-dashboard:
  #     file: dashboards/custom-dashboard.json
    prometheus-stats:
      gnetId: 315
      revision: 3
      datasource: Prometheus
    node-expoertor-full:
      gnetId: 1860
      revision: 33
      datasource: Prometheus
    loki-stack-monitoring:
      gnetId: 14055
      revision: 5
      datasource: Loki
  #   local-dashboard:
  #     url: https://example.com/repository/test.json
  #     token: ''
  #   local-dashboard-base64:
  #     url: https://example.com/repository/test-b64.json
  #     token: ''
  #     b64content: true
  #   local-dashboard-gitlab:
  #     url: https://example.com/repository/test-gitlab.json
  #     gitlabToken: ''
  #   local-dashboard-bitbucket:
  #     url: https://example.com/repository/test-bitbucket.json
  #     bearerToken: ''
  #   local-dashboard-azure:
  #     url: https://example.com/repository/test-azure.json
  #     basic: ''
  #     acceptHeader: '*/*'
    opentelemetry-collector-data-flow.json:
      json: |
        {
          "annotations": {
            "list": [
              {
                "builtIn": 1,
                "datasource": {
                  "type": "grafana",
                  "uid": "-- Grafana --"
                },
                "enable": true,
                "hide": true,
                "iconColor": "rgba(0, 211, 255, 1)",
                "name": "Annotations & Alerts",
                "target": {
                  "limit": 100,
                  "matchAny": false,
                  "tags": [],
                  "type": "dashboard"
                },
                "type": "dashboard"
              }
            ]
          },
          "description": "otelcol metrics dashboard",
          "editable": true,
          "fiscalYearStartMonth": 0,
          "graphTooltip": 0,
          "id": 6,
          "links": [],
          "liveNow": false,
          "panels": [
            {
              "collapsed": false,
              "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 0
              },
              "id": 8,
              "panels": [],
              "title": "Process",
              "type": "row"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "Otel Collector Instance",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  }
                },
                "overrides": []
              },
              "gridPos": {
                "h": 4,
                "w": 3,
                "x": 0,
                "y": 1
              },
              "id": 6,
              "options": {
                "colorMode": "value",
                "graphMode": "area",
                "justifyMode": "center",
                "orientation": "auto",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "textMode": "auto"
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "count(count(otelcol_process_cpu_seconds{service_instance_id=~\".*\"}) by (service_instance_id))",
                  "legendFormat": "__auto",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Instance",
              "type": "stat"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "otelcol_process_cpu_seconds",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "s"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 4,
                "w": 3,
                "x": 3,
                "y": 1
              },
              "id": 24,
              "options": {
                "orientation": "auto",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": true
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "avg(rate(otelcol_process_cpu_seconds{}[$__rate_interval])*100) by (instance)",
                  "legendFormat": "__auto",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Cpu",
              "type": "gauge"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "Memory Rss\navg(otelcol_process_memory_rss{}) by (instance)",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "bytes"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 4,
                "w": 3,
                "x": 6,
                "y": 1
              },
              "id": 38,
              "options": {
                "orientation": "auto",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": true
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "avg(otelcol_process_memory_rss{}) by (instance)",
                  "legendFormat": "__auto",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Memory",
              "type": "gauge"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "",
              "gridPos": {
                "h": 4,
                "w": 15,
                "x": 9,
                "y": 1
              },
              "id": 32,
              "options": {
                "code": {
                  "language": "plaintext",
                  "showLineNumbers": false,
                  "showMiniMap": false
                },
                "content": "## Opentelemetry Collector Data Ingress/Egress\n\n`service_version:` ${service_version}\n\n`opentelemetry collector:` contrib\n\n",
                "mode": "markdown"
              },
              "pluginVersion": "9.1.0",
              "type": "text"
            },
            {
              "collapsed": false,
              "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 5
              },
              "id": 10,
              "panels": [],
              "title": "Trace Pipeline",
              "type": "row"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "(avg(sum by(job) (rate(otelcol_exporter_sent_spans{}[$__range]))) / avg(sum by(job) (rate(otelcol_receiver_accepted_spans{}[$__range])))) ",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "thresholds"
                  },
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "light-blue",
                        "value": null
                      },
                      {
                        "color": "semi-dark-red",
                        "value": 0
                      },
                      {
                        "color": "super-light-orange",
                        "value": 0.4
                      },
                      {
                        "color": "dark-blue",
                        "value": 0.9
                      },
                      {
                        "color": "super-light-orange",
                        "value": 1.2
                      },
                      {
                        "color": "dark-red",
                        "value": 2.1
                      }
                    ]
                  },
                  "unit": "percentunit"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 19,
                "w": 3,
                "x": 0,
                "y": 6
              },
              "id": 55,
              "options": {
                "orientation": "vertical",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": false
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "avg(sum by(job) (rate(otelcol_exporter_sent_spans{}[$__range])))",
                  "format": "time_series",
                  "hide": true,
                  "instant": false,
                  "legendFormat": "__auto",
                  "range": true,
                  "refId": "export"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "avg(sum by(job) (rate(otelcol_receiver_accepted_spans{}[$__range])))",
                  "format": "time_series",
                  "hide": true,
                  "legendFormat": "__auto",
                  "range": true,
                  "refId": "acc"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "(avg(sum by(job) (rate(otelcol_exporter_sent_spans{}[$__range]))) / avg(sum by(job) (rate(otelcol_receiver_accepted_spans{}[$__range])))) ",
                  "hide": false,
                  "legendFormat": "__auto",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Export Ratio",
              "transformations": [],
              "type": "gauge"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "gridPos": {
                "h": 11,
                "w": 21,
                "x": 3,
                "y": 6
              },
              "id": 4,
              "options": {
                "nodes": {
                  "mainStatUnit": "flops"
                }
              },
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "label_join(label_join(\n(rate(otelcol_receiver_accepted_spans{}[$__interval]))\n, \"id\", \"\", \"transport\", \"receiver\")\n, \"title\", \"\", \"transport\", \"receiver\")\n\nor\n\nlabel_replace(label_replace(\nsum by(service_name) (rate(otelcol_receiver_accepted_spans{}[$__interval]))\n, \"id\", \"processor\", \"dummynode\", \"\")\n, \"title\", \"processor\", \"dummynode\", \"\")\n\nor\nlabel_replace(label_replace(\n(rate(otelcol_processor_batch_batch_send_size_count{}[$__interval]))\n, \"id\", \"$0\", \"processor\", \".*\")\n, \"title\", \"$0\", \"processor\", \".*\")\n\nor\nlabel_replace(label_replace(\nsum by(exporter) (rate(otelcol_exporter_sent_spans{}[$__interval]))\n, \"id\", \"exporter\", \"dummynode\", \"\")\n, \"title\", \"exporter\", \"dummynode\", \"\")\n        \nor\nlabel_replace(label_replace(\nsum by(exporter) (rate(otelcol_exporter_sent_spans{}[$__interval]))\n, \"id\", \"$0\", \"exporter\", \".*\")\n, \"title\", \"$0\", \"exporter\", \".*\")",
                  "format": "table",
                  "instant": true,
                  "legendFormat": "__auto",
                  "range": false,
                  "refId": "nodes"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "label_join(\nlabel_replace(label_join(\n(rate(otelcol_receiver_accepted_spans{}[$__interval]))\n\n ,\"source\",\"\",\"transport\",\"receiver\")\n,\"target\",\"processor\",\"\",\"\")\n,\"id\",\"-\",\"source\",\"target\")\n\n  or\n\n  label_join(\nlabel_replace(label_replace(\n  (rate(otelcol_processor_batch_batch_send_size_count{}[$__interval]))\n ,\"source\",\"processor\",\"\",\"\")\n,\"target\",\"$0\",\"processor\",\".*\")\n,\"id\",\"-\",\"source\",\"target\")\n\nor\n  label_join(\nlabel_replace(label_replace(\n    (rate(otelcol_processor_batch_batch_send_size_count{}[$__interval]))\n ,\"source\",\"$0\",\"processor\",\".*\")\n,\"target\",\"exporter\",\"\",\"\")\n,\"id\",\"-\",\"source\",\"target\")\n\nor\n  label_join(\nlabel_replace(label_replace(\n   (rate(otelcol_exporter_sent_spans{}[$__interval]))\n ,\"source\",\"exporter\",\"\",\"\")\n,\"target\",\"$0\",\"exporter\",\".*\")\n,\"id\",\"-\",\"source\",\"target\")\n\n",
                  "format": "table",
                  "hide": false,
                  "instant": true,
                  "legendFormat": "__auto",
                  "range": false,
                  "refId": "edges"
                }
              ],
              "transformations": [],
              "type": "nodeGraph"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "Spans Accepted by Receiver and Transport",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "noValue": "no data",
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "text",
                        "value": null
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 5,
                "w": 5,
                "x": 3,
                "y": 17
              },
              "id": 12,
              "options": {
                "colorMode": "value",
                "graphMode": "area",
                "justifyMode": "auto",
                "orientation": "horizontal",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "textMode": "auto"
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "sum(rate(otelcol_receiver_accepted_spans{}[$__rate_interval])) by (receiver,transport)",
                  "legendFormat": "{{receiver}}-{{transport}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Accepted",
              "type": "stat"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "Total Spans Accepted ",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "text",
                        "value": null
                      }
                    ]
                  }
                },
                "overrides": []
              },
              "gridPos": {
                "h": 5,
                "w": 3,
                "x": 8,
                "y": 17
              },
              "id": 13,
              "options": {
                "orientation": "horizontal",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": true
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "sum(rate(otelcol_receiver_accepted_spans{}[$__rate_interval])) ",
                  "legendFormat": "{{receiver}}-{{transport}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Total ",
              "type": "gauge"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "Total Batch Processed",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "#EAB839",
                        "value": 1
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 5,
                "w": 5,
                "x": 11,
                "y": 17
              },
              "id": 15,
              "options": {
                "colorMode": "value",
                "graphMode": "area",
                "justifyMode": "auto",
                "orientation": "horizontal",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "text": {},
                "textMode": "auto"
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "sum(rate(otelcol_processor_batch_batch_send_size_sum{}[$__rate_interval]))  by (processor)",
                  "legendFormat": "{{processor}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Batch",
              "type": "stat"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "text",
                        "value": null
                      }
                    ]
                  }
                },
                "overrides": []
              },
              "gridPos": {
                "h": 5,
                "w": 3,
                "x": 16,
                "y": 17
              },
              "id": 14,
              "options": {
                "orientation": "auto",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": true
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "sum(rate(otelcol_exporter_sent_spans{}[$__interval])) ",
                  "format": "time_series",
                  "instant": false,
                  "legendFormat": "{{processor}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Total ",
              "type": "gauge"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "Sent by Exporter",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "text",
                        "value": null
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 5,
                "w": 5,
                "x": 19,
                "y": 17
              },
              "id": 30,
              "options": {
                "colorMode": "value",
                "graphMode": "area",
                "justifyMode": "auto",
                "orientation": "horizontal",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "textMode": "auto"
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "sum(rate(otelcol_exporter_sent_spans{}[$__rate_interval])) by (exporter)",
                  "format": "time_series",
                  "instant": false,
                  "legendFormat": "{{processor}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Sent",
              "type": "stat"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "noValue": "no data",
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "text",
                        "value": null
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 3,
                "w": 5,
                "x": 3,
                "y": 22
              },
              "id": 17,
              "options": {
                "colorMode": "value",
                "graphMode": "area",
                "justifyMode": "auto",
                "orientation": "horizontal",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "textMode": "auto"
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "sum(rate(otelcol_receiver_refused_spans{}[$__rate_interval])) by (receiver,transport)",
                  "legendFormat": "{{receiver}}-{{transport}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Refused",
              "type": "stat"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "Total Spans Accepted ",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "text",
                        "value": null
                      }
                    ]
                  }
                },
                "overrides": []
              },
              "gridPos": {
                "h": 3,
                "w": 3,
                "x": 8,
                "y": 22
              },
              "id": 18,
              "options": {
                "orientation": "auto",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": true
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "sum(rate(otelcol_receiver_refused_spans{}[$__rate_interval])) ",
                  "legendFormat": "{{receiver}}-{{transport}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Total ",
              "type": "gauge"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "otelcol_exporter_send_failed_spans",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "text",
                        "value": null
                      }
                    ]
                  }
                },
                "overrides": []
              },
              "gridPos": {
                "h": 3,
                "w": 3,
                "x": 16,
                "y": 22
              },
              "id": 19,
              "options": {
                "orientation": "auto",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": true
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "sum(rate(otelcol_exporter_send_failed_spans{}[$__rate_interval])) ",
                  "format": "time_series",
                  "instant": false,
                  "legendFormat": "{{processor}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Total ",
              "type": "gauge"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "Sent by Exporter\notelcol_exporter_send_failed_spans",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "text",
                        "value": null
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 3,
                "w": 5,
                "x": 19,
                "y": 22
              },
              "id": 20,
              "options": {
                "colorMode": "value",
                "graphMode": "area",
                "justifyMode": "auto",
                "orientation": "horizontal",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "textMode": "auto"
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "sum(rate(otelcol_exporter_send_failed_spans{}[$__rate_interval])) by (exporter)",
                  "format": "time_series",
                  "instant": false,
                  "legendFormat": "{{processor}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Failed",
              "type": "stat"
            },
            {
              "collapsed": false,
              "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 25
              },
              "id": 22,
              "panels": [],
              "title": "Metrics Pipeline",
              "type": "row"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "avg(sum by(job) (rate(otelcol_exporter_sent_metric_points{}[$__range]))) versus avg(sum by(job) (rate(otelcol_receiver_accepted_metric_points{}[$__range])))",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "thresholds"
                  },
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "light-blue",
                        "value": null
                      },
                      {
                        "color": "semi-dark-red",
                        "value": 0
                      },
                      {
                        "color": "super-light-orange",
                        "value": 0.4
                      },
                      {
                        "color": "dark-blue",
                        "value": 0.9
                      },
                      {
                        "color": "super-light-orange",
                        "value": 1.2
                      },
                      {
                        "color": "dark-red",
                        "value": 2.1
                      }
                    ]
                  },
                  "unit": "percentunit"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 19,
                "w": 3,
                "x": 0,
                "y": 26
              },
              "id": 54,
              "options": {
                "orientation": "vertical",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "/.*/",
                  "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": false
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "avg(sum by(job) (rate(otelcol_exporter_sent_metric_points{}[$__range])))",
                  "format": "time_series",
                  "hide": true,
                  "instant": false,
                  "legendFormat": "__auto",
                  "range": true,
                  "refId": "export"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "avg(sum by(job) (rate(otelcol_receiver_accepted_metric_points{}[$__range])))",
                  "format": "time_series",
                  "hide": true,
                  "legendFormat": "__auto",
                  "range": true,
                  "refId": "acc"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "( avg(sum by(job) (rate(otelcol_exporter_sent_metric_points{}[$__range]))) /avg(sum by(job) (rate(otelcol_receiver_accepted_metric_points{}[$__range]))))",
                  "hide": false,
                  "legendFormat": "__auto",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Export Ratio",
              "transformations": [
                {
                  "id": "calculateField",
                  "options": {
                    "alias": "percent",
                    "binary": {
                      "left": "avg(sum by(job) (rate(otelcol_exporter_sent_metric_points{}[3600s])))",
                      "operator": "/",
                      "reducer": "sum",
                      "right": "avg(sum by(job) (rate(otelcol_receiver_accepted_metric_points{}[3600s])))"
                    },
                    "mode": "binary",
                    "reduce": {
                      "reducer": "sum"
                    }
                  }
                },
                {
                  "id": "organize",
                  "options": {
                    "excludeByName": {
                      "(sum(rate(otelcol_exporter_sent_metric_points{exporter=\"prometheus\"}[1m0s])) )": true,
                      "Time": true,
                      "avg(sum by(job) (rate(otelcol_exporter_sent_metric_points{}[3600s])))": true,
                      "avg(sum by(job) (rate(otelcol_receiver_accepted_metric_points{}[3600s])))": true,
                      "{instance=\"otelcol:9464\", job=\"otel\"}": true
                    },
                    "indexByName": {},
                    "renameByName": {
                      "Time": "",
                      "percent": "Percent",
                      "{exporter=\"debug\", instance=\"otelcol:8888\", job=\"otel-collector\", service_instance_id=\"fbfa720a-ebf9-45c8-a79a-9d3b6021a663\", service_name=\"otelcol-contrib\", service_version=\"0.70.0\"}": ""
                    }
                  }
                }
              ],
              "type": "gauge"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "Metrics Signalling Pipelines",
              "gridPos": {
                "h": 11,
                "w": 21,
                "x": 3,
                "y": 26
              },
              "id": 25,
              "options": {
                "nodes": {
                  "mainStatUnit": "flops"
                }
              },
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "\nlabel_join(label_join(\n(rate(otelcol_receiver_accepted_metric_points{}[$__interval]))\n, \"id\", \"\", \"transport\", \"receiver\")\n, \"title\", \"\", \"transport\", \"receiver\")\n\nor\n\nlabel_replace(label_replace(\nsum by(service_name) (rate(otelcol_receiver_accepted_spans{}[$__interval]))\n, \"id\", \"processor\", \"dummynode\", \"\")\n, \"title\", \"processor\", \"dummynode\", \"\")\n\n\n\nor\nlabel_replace(label_replace(\n(rate(otelcol_processor_batch_batch_send_size_count{}[$__interval]))\n, \"id\", \"$0\", \"processor\", \".*\")\n, \"title\", \"$0\", \"processor\", \".*\")\n\n\n\n\n\nor\nlabel_replace(label_replace(\nsum (rate(otelcol_exporter_sent_metric_points{}[$__interval]))\n, \"id\", \"exporter\", \"dummynode\", \"\")\n, \"title\", \"exporter\", \"dummynode\", \"\")\n\nor\nlabel_replace(label_replace(\nsum by(exporter) (rate(otelcol_exporter_sent_metric_points{}[$__interval]))\n, \"id\", \"$0\", \"exporter\", \".*\")\n, \"title\", \"$0\", \"exporter\", \".*\")",
                  "format": "table",
                  "instant": true,
                  "legendFormat": "__auto",
                  "range": false,
                  "refId": "nodes"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "label_join(\nlabel_replace(label_join(\n(rate(otelcol_receiver_accepted_metric_points{}[$__interval]))\n\n,\"source\",\"\",\"transport\",\"receiver\")\n,\"target\",\"processor\",\"\",\"\")\n,\"id\",\"-\",\"source\",\"target\")\n\n\nor\n\nlabel_join(\nlabel_replace(label_replace(\n(rate(otelcol_processor_batch_batch_send_size_count{}[$__interval]))\n,\"source\",\"processor\",\"\",\"\")\n,\"target\",\"$0\",\"processor\",\".*\")\n,\"id\",\"-\",\"source\",\"target\")\n\n\n\n\n\nor\n\n\nlabel_join(\nlabel_replace(label_replace(\n(rate(otelcol_processor_batch_batch_send_size_count{}[$__interval]))\n,\"source\",\"$0\",\"processor\",\".*\")\n,\"target\",\"exporter\",\"\",\"\")\n,\"id\",\"-\",\"source\",\"target\")\n\nor\nlabel_join(\nlabel_replace(label_replace(\n(rate(otelcol_exporter_sent_metric_points{}[$__interval]))\n,\"source\",\"exporter\",\"\",\"\")\n,\"target\",\"$0\",\"exporter\",\".*\")\n,\"id\",\"-\",\"source\",\"target\")",
                  "format": "table",
                  "hide": false,
                  "instant": true,
                  "legendFormat": "__auto",
                  "range": false,
                  "refId": "edges"
                }
              ],
              "transformations": [],
              "type": "nodeGraph"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "otelcol_receiver_accepted_metric_points",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "noValue": "no data",
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "text",
                        "value": null
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 5,
                "w": 5,
                "x": 3,
                "y": 37
              },
              "id": 26,
              "options": {
                "colorMode": "value",
                "graphMode": "area",
                "justifyMode": "auto",
                "orientation": "horizontal",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "textMode": "auto"
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "sum(rate(otelcol_receiver_accepted_metric_points{}[$__rate_interval])) by (receiver,transport)",
                  "legendFormat": "{{receiver}}-{{transport}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Accepted",
              "type": "stat"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "otelcol_receiver_accepted_metric_points\nTotal Accepted ",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "text",
                        "value": null
                      }
                    ]
                  }
                },
                "overrides": []
              },
              "gridPos": {
                "h": 5,
                "w": 3,
                "x": 8,
                "y": 37
              },
              "id": 27,
              "options": {
                "orientation": "auto",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": true
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "sum(rate(otelcol_receiver_accepted_metric_points{}[$__rate_interval])) ",
                  "legendFormat": "{{receiver}}-{{transport}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Total ",
              "type": "gauge"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "#EAB839",
                        "value": 1
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 5,
                "w": 5,
                "x": 11,
                "y": 37
              },
              "id": 28,
              "options": {
                "colorMode": "value",
                "graphMode": "area",
                "justifyMode": "auto",
                "orientation": "horizontal",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "text": {},
                "textMode": "auto"
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "sum(rate(otelcol_processor_batch_batch_send_size_sum{}[$__rate_interval]))  by (processor)",
                  "legendFormat": "{{processor}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Batch",
              "type": "stat"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "Total Export ",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "text",
                        "value": null
                      }
                    ]
                  }
                },
                "overrides": []
              },
              "gridPos": {
                "h": 5,
                "w": 3,
                "x": 16,
                "y": 37
              },
              "id": 29,
              "options": {
                "orientation": "auto",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": true
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "sum(rate(otelcol_exporter_sent_metric_points{}[$__rate_interval])) ",
                  "format": "time_series",
                  "instant": false,
                  "legendFormat": "{{processor}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Total ",
              "type": "gauge"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "Sent by Exporter",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "text",
                        "value": null
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 5,
                "w": 5,
                "x": 19,
                "y": 37
              },
              "id": 16,
              "options": {
                "colorMode": "value",
                "graphMode": "area",
                "justifyMode": "auto",
                "orientation": "horizontal",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "textMode": "auto"
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "sum(rate(otelcol_exporter_sent_metric_points{}[$__rate_interval])) by (exporter) ",
                  "format": "time_series",
                  "instant": false,
                  "legendFormat": "{{processor}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Sent",
              "type": "stat"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "noValue": "no data",
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "text",
                        "value": null
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 3,
                "w": 5,
                "x": 3,
                "y": 42
              },
              "id": 47,
              "options": {
                "colorMode": "value",
                "graphMode": "area",
                "justifyMode": "auto",
                "orientation": "horizontal",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "textMode": "auto"
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "sum(rate(otelcol_receiver_refused_metric_points{}[$__rate_interval])) by (receiver,transport)",
                  "legendFormat": "{{receiver}}-{{transport}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Refused",
              "type": "stat"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "Total Refused \nsum(rate(otelcol_receiver_refused_metric_points{}[$__rate_interval])) ",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "text",
                        "value": null
                      }
                    ]
                  }
                },
                "overrides": []
              },
              "gridPos": {
                "h": 3,
                "w": 3,
                "x": 8,
                "y": 42
              },
              "id": 48,
              "options": {
                "orientation": "auto",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": true
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "sum(rate(otelcol_receiver_refused_metric_points{}[$__rate_interval])) ",
                  "legendFormat": "{{receiver}}-{{transport}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Total ",
              "type": "gauge"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "Total Failed Export ",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "text",
                        "value": null
                      }
                    ]
                  }
                },
                "overrides": []
              },
              "gridPos": {
                "h": 3,
                "w": 3,
                "x": 16,
                "y": 42
              },
              "id": 49,
              "options": {
                "orientation": "auto",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": true
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "sum(rate(otelcol_exporter_send_failed_metric_points{}[$__rate_interval])) ",
                  "format": "time_series",
                  "instant": false,
                  "legendFormat": "{{processor}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Total",
              "type": "gauge"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "Sent by Exporter\notelcol_exporter_send_failed_spans",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "text",
                        "value": null
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 3,
                "w": 5,
                "x": 19,
                "y": 42
              },
              "id": 50,
              "options": {
                "colorMode": "value",
                "graphMode": "area",
                "justifyMode": "auto",
                "orientation": "horizontal",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "textMode": "auto"
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "sum(rate(otelcol_exporter_send_failed_metric_points{}[$__rate_interval])) by (exporter)",
                  "format": "time_series",
                  "instant": false,
                  "legendFormat": "{{processor}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Failed",
              "type": "stat"
            },
            {
              "collapsed": false,
              "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 45
              },
              "id": 35,
              "panels": [],
              "title": "Prometheus Scrape",
              "type": "row"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "otelcol prometheus exporter 8888 export rate versus prometheus scrape metrics",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "thresholds"
                  },
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "light-blue",
                        "value": null
                      },
                      {
                        "color": "semi-dark-red",
                        "value": 0
                      },
                      {
                        "color": "super-light-orange",
                        "value": 0.4
                      },
                      {
                        "color": "dark-blue",
                        "value": 0.9
                      },
                      {
                        "color": "super-light-orange",
                        "value": 1.2
                      },
                      {
                        "color": "dark-red",
                        "value": 2.1
                      }
                    ]
                  },
                  "unit": "percentunit"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 9,
                "w": 3,
                "x": 0,
                "y": 46
              },
              "id": 53,
              "options": {
                "orientation": "vertical",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "/.*/",
                  "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": false
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "(sum_over_time(scrape_samples_scraped{job=\"otel-collector\"}[$__range])/ count_over_time(scrape_samples_scraped{job=\"otel-collector\"}[$__range])/(5*30)) ",
                  "format": "time_series",
                  "instant": false,
                  "legendFormat": "__auto",
                  "range": true,
                  "refId": "accepted"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "expr": "(sum(rate(otelcol_exporter_sent_metric_points{exporter=\"prometheus\"}[$__rate_interval])) )",
                  "format": "time_series",
                  "hide": false,
                  "legendFormat": "__auto",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Exported/Scraped",
              "transformations": [
                {
                  "id": "calculateField",
                  "options": {
                    "alias": "percent",
                    "binary": {
                      "left": "{instance=\"otelcol:9464\", job=\"otel-collector\"}",
                      "operator": "/",
                      "reducer": "sum",
                      "right": "(sum(rate(otelcol_exporter_sent_metric_points{exporter=\"prometheus\"}[1m0s])) )"
                    },
                    "mode": "binary",
                    "reduce": {
                      "reducer": "sum"
                    }
                  }
                },
                {
                  "id": "organize",
                  "options": {
                    "excludeByName": {
                      "(sum(rate(otelcol_exporter_sent_metric_points{exporter=\"prometheus\"}[1m0s])) )": true,
                      "Time": true,
                      "{instance=\"otelcol:9464\", job=\"otel\"}": true
                    },
                    "indexByName": {},
                    "renameByName": {
                      "percent": "Percent"
                    }
                  }
                }
              ],
              "type": "gauge"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "sum_over_time(scrape_samples_scraped[$__range])/ count_over_time(scrape_samples_scraped[$__range])",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  }
                },
                "overrides": []
              },
              "gridPos": {
                "h": 9,
                "w": 5,
                "x": 3,
                "y": 46
              },
              "id": 37,
              "options": {
                "colorMode": "value",
                "graphMode": "area",
                "justifyMode": "auto",
                "orientation": "horizontal",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "textMode": "value_and_name"
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "sum_over_time(scrape_samples_scraped[$__range])/ count_over_time(scrape_samples_scraped[$__range])/(5*30)",
                  "format": "time_series",
                  "instant": false,
                  "legendFormat": "{{job}}/{{instance}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Samples Scraped",
              "type": "stat"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "scrape_samples_scraped{job!=\"\"}\nTotal Samples Scraped",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "continuous-BlYlRd"
                  },
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  }
                },
                "overrides": []
              },
              "gridPos": {
                "h": 9,
                "w": 3,
                "x": 8,
                "y": 46
              },
              "id": 42,
              "options": {
                "orientation": "horizontal",
                "reduceOptions": {
                  "calcs": [
                    "lastNotNull"
                  ],
                  "fields": "",
                  "values": false
                },
                "showThresholdLabels": false,
                "showThresholdMarkers": true
              },
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "sum_over_time(scrape_samples_scraped[$__range])/ count_over_time(scrape_samples_scraped[$__range])/(5*30)",
                  "format": "time_series",
                  "hide": false,
                  "instant": false,
                  "legendFormat": "__auto",
                  "range": true,
                  "refId": "B"
                }
              ],
              "title": "Total",
              "transformations": [
                {
                  "id": "calculateField",
                  "options": {
                    "mode": "reduceRow",
                    "reduce": {
                      "include": [
                        "{instance=\"otelcol:8888\", job=\"otel-collector\"}"
                      ],
                      "reducer": "sum"
                    },
                    "replaceFields": true
                  }
                }
              ],
              "type": "gauge"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 11,
                "y": 46
              },
              "id": 41,
              "pluginVersion": "9.1.0",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "label_replace(label_replace(label_replace(\nsum (scrape_samples_scraped{job!=\"\"}) by (instance)\n, \"id\", \"$0\", \"instance\", \".*\")\n, \"title\", \"$0\", \"instance\", \".*\")\n,\"mainstat\",\"\",\"\",\"\")\n\nor \n\nlabel_replace(label_replace(label_replace(\nsum (scrape_samples_scraped{job!=\"\"})\n, \"id\", \"prometheus\", \"\", \"\")\n, \"title\", \"prometheus\", \"\", \"\")\n,\"mainstat\",\"\",\"\",\"\")\n",
                  "format": "table",
                  "hide": false,
                  "instant": true,
                  "legendFormat": "__auto",
                  "range": false,
                  "refId": "nodes"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "webstore-metrics"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "label_join(\nlabel_replace(label_replace(\nsum (scrape_samples_scraped{job!=\"\"}) by (instance)\n,\"source\",\"$0\",\"instance\",\".*\")\n,\"target\",\"prometheus\",\"\",\"\")\n,\"id\",\"-\",\"source\",\"target\")",
                  "format": "table",
                  "hide": false,
                  "instant": true,
                  "legendFormat": "__auto",
                  "range": false,
                  "refId": "edges"
                }
              ],
              "transformations": [
                {
                  "id": "organize",
                  "options": {
                    "excludeByName": {
                      "Time": true
                    },
                    "indexByName": {},
                    "renameByName": {}
                  }
                }
              ],
              "type": "nodeGraph"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "webstore-metrics"
              },
              "description": "Sent by Exporter",
              "gridPos": {
                "h": 9,
                "w": 5,
                "x": 19,
                "y": 46
              },
              "id": 52,
              "options": {
                "code": {
                  "language": "plaintext",
                  "showLineNumbers": false,
                  "showMiniMap": false
                },
                "content": "\n \n## Prometheus Config\n\n`evaluation_interval:` 30s\n\n`scrape_interval:` 5s",
                "mode": "markdown"
              },
              "pluginVersion": "9.1.0",
              "type": "text"
            }
          ],
          "refresh": false,
          "schemaVersion": 37,
          "style": "dark",
          "tags": [],
          "templating": {
            "list": [
              {
                "allValue": ".*",
                "current": {
                  "selected": false,
                  "text": "0.70.0",
                  "value": "0.70.0"
                },
                "datasource": {
                  "type": "prometheus",
                  "uid": "webstore-metrics"
                },
                "definition": "query_result(sum(otelcol_process_uptime{}) by (service_version))\n",
                "hide": 2,
                "includeAll": false,
                "label": "service_version",
                "multi": true,
                "name": "service_version",
                "options": [],
                "query": {
                  "query": "query_result(sum(otelcol_process_uptime{}) by (service_version))\n",
                  "refId": "StandardVariableQuery"
                },
                "refresh": 1,
                "regex": "/.*service_version=\"(.*)\".*/",
                "skipUrlSync": false,
                "sort": 0,
                "type": "query"
              }
            ]
          },
          "time": {
            "from": "now-15m",
            "to": "now"
          },
          "timepicker": {},
          "timezone": "",
          "title": "Opentelemetry Collector Data Flow",
          "uid": "rl5_tea4k",
          "version": 2,
          "weekStart": ""
        }
    opentelemetry-collector.json:
      json: |
        {
          "__inputs": [],
          "__elements": {},
          "__requires": [
            {
              "type": "grafana",
              "id": "grafana",
              "name": "Grafana",
              "version": "10.0.3"
            },
            {
              "type": "panel",
              "id": "heatmap",
              "name": "Heatmap",
              "version": ""
            },
            {
              "type": "panel",
              "id": "nodeGraph",
              "name": "Node Graph",
              "version": ""
            },
            {
              "type": "datasource",
              "id": "prometheus",
              "name": "Prometheus",
              "version": "1.0.0"
            },
            {
              "type": "panel",
              "id": "table",
              "name": "Table",
              "version": ""
            },
            {
              "type": "panel",
              "id": "text",
              "name": "Text",
              "version": ""
            },
            {
              "type": "panel",
              "id": "timeseries",
              "name": "Time series",
              "version": ""
            }
          ],
          "annotations": {
            "list": [
              {
                "builtIn": 1,
                "datasource": {
                  "type": "datasource",
                  "uid": "grafana"
                },
                "enable": true,
                "hide": true,
                "iconColor": "rgba(0, 211, 255, 1)",
                "name": "Annotations & Alerts",
                "target": {
                  "limit": 100,
                  "matchAny": false,
                  "tags": [],
                  "type": "dashboard"
                },
                "type": "dashboard"
              }
            ]
          },
          "description": "Visualize OpenTelemetry (OTEL) collector metrics (tested with OTEL contrib v0.84.0)",
          "editable": true,
          "fiscalYearStartMonth": 0,
          "gnetId": 15983,
          "graphTooltip": 1,
          "id": null,
          "links": [],
          "liveNow": false,
          "panels": [
            {
              "collapsed": false,
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 0
              },
              "id": 23,
              "panels": [],
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "refId": "A"
                }
              ],
              "title": "Receivers",
              "type": "row"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Accepted: count/rate of spans successfully pushed into the pipeline.\nRefused: count/rate of spans that could not be pushed into the pipeline.",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisCenteredZero": false,
                    "axisColorMode": "text",
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "never",
                    "spanNulls": true,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "links": [],
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "short"
                },
                "overrides": [
                  {
                    "matcher": {
                      "id": "byRegexp",
                      "options": "/Refused.*/"
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "red",
                          "mode": "fixed"
                        }
                      }
                    ]
                  }
                ]
              },
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 0,
                "y": 1
              },
              "id": 28,
              "interval": "$minstep",
              "links": [],
              "options": {
                "legend": {
                  "calcs": [
                    "min",
                    "max",
                    "mean"
                  ],
                  "displayMode": "table",
                  "placement": "bottom",
                  "showLegend": true
                },
                "tooltip": {
                  "mode": "multi",
                  "sort": "none"
                }
              },
              "pluginVersion": "8.3.5",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_receiver_accepted_spans{receiver=~\"$receiver\",job=\"$job\"}[$__rate_interval])) by (receiver $grouping)",
                  "format": "time_series",
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Accepted: {{receiver}} {{transport}} {{service_instance_id}}",
                  "range": true,
                  "refId": "A"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_receiver_refused_spans{receiver=~\"$receiver\",job=\"$job\"}[$__rate_interval])) by (receiver $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Refused: {{receiver}} {{transport}} {{service_instance_id}}",
                  "range": true,
                  "refId": "B"
                }
              ],
              "title": "Spans ${metric:text}",
              "type": "timeseries"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Accepted: count/rate of metric points successfully pushed into the pipeline.\nRefused: count/rate of metric points that could not be pushed into the pipeline.",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisCenteredZero": false,
                    "axisColorMode": "text",
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "never",
                    "spanNulls": true,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "links": [],
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "short"
                },
                "overrides": [
                  {
                    "matcher": {
                      "id": "byRegexp",
                      "options": "/Refused.*/"
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "red",
                          "mode": "fixed"
                        }
                      }
                    ]
                  }
                ]
              },
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 8,
                "y": 1
              },
              "id": 32,
              "interval": "$minstep",
              "links": [],
              "options": {
                "legend": {
                  "calcs": [
                    "min",
                    "max",
                    "mean"
                  ],
                  "displayMode": "table",
                  "placement": "bottom",
                  "showLegend": true
                },
                "tooltip": {
                  "mode": "multi",
                  "sort": "none"
                }
              },
              "pluginVersion": "8.3.5",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_receiver_accepted_metric_points{receiver=~\"$receiver\",job=\"$job\"}[$__rate_interval])) by (receiver $grouping)",
                  "format": "time_series",
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Accepted: {{receiver}} {{transport}} {{service_instance_id}}",
                  "range": true,
                  "refId": "A"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_receiver_refused_metric_points{receiver=~\"$receiver\",job=\"$job\"}[$__rate_interval])) by (receiver $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Refused: {{receiver}} {{transport}} {{service_instance_id}}",
                  "range": true,
                  "refId": "B"
                }
              ],
              "title": "Metric Points ${metric:text}",
              "type": "timeseries"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Accepted: count/rate of log records successfully pushed into the pipeline.\nRefused: count/rate of log records that could not be pushed into the pipeline.",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisCenteredZero": false,
                    "axisColorMode": "text",
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "never",
                    "spanNulls": true,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "links": [],
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "short"
                },
                "overrides": [
                  {
                    "matcher": {
                      "id": "byRegexp",
                      "options": "/Refused.*/"
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "red",
                          "mode": "fixed"
                        }
                      }
                    ]
                  }
                ]
              },
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 16,
                "y": 1
              },
              "id": 47,
              "interval": "$minstep",
              "links": [],
              "options": {
                "legend": {
                  "calcs": [
                    "min",
                    "max",
                    "mean"
                  ],
                  "displayMode": "table",
                  "placement": "bottom",
                  "showLegend": true
                },
                "tooltip": {
                  "mode": "multi",
                  "sort": "none"
                }
              },
              "pluginVersion": "8.3.5",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_receiver_accepted_log_records{receiver=~\"$receiver\",job=\"$job\"}[$__rate_interval])) by (receiver $grouping)",
                  "format": "time_series",
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Accepted: {{receiver}} {{transport}} {{service_instance_id}}",
                  "range": true,
                  "refId": "A"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_receiver_refused_log_records{receiver=~\"$receiver\",job=\"$job\"}[$__rate_interval])) by (receiver $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Refused: {{receiver}} {{transport}} {{service_instance_id}}",
                  "range": true,
                  "refId": "B"
                }
              ],
              "title": "Log Records ${metric:text}",
              "type": "timeseries"
            },
            {
              "collapsed": false,
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 9
              },
              "id": 34,
              "panels": [],
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "refId": "A"
                }
              ],
              "title": "Processors",
              "type": "row"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisCenteredZero": false,
                    "axisColorMode": "text",
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "never",
                    "spanNulls": true,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "links": [],
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "short"
                },
                "overrides": [
                  {
                    "matcher": {
                      "id": "byRegexp",
                      "options": "/.*Refused.*/"
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "red",
                          "mode": "fixed"
                        }
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byRegexp",
                      "options": "/.*Dropped.*/"
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "purple",
                          "mode": "fixed"
                        }
                      }
                    ]
                  }
                ]
              },
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 0,
                "y": 18
              },
              "id": 36,
              "interval": "$minstep",
              "links": [],
              "options": {
                "legend": {
                  "calcs": [
                    "min",
                    "max",
                    "mean"
                  ],
                  "displayMode": "table",
                  "placement": "bottom",
                  "showLegend": true
                },
                "tooltip": {
                  "mode": "multi",
                  "sort": "none"
                }
              },
              "pluginVersion": "8.3.5",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_processor_batch_batch_send_size_count{processor=~\"$processor\",job=\"$job\"}[$__rate_interval])) by (processor)",
                  "format": "time_series",
                  "hide": false,
                  "instant": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Batch send size count: {{processor}}",
                  "refId": "B"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_processor_batch_batch_send_size_sum{processor=~\"$processor\",job=\"$job\"}[$__rate_interval])) by (processor)",
                  "format": "time_series",
                  "hide": false,
                  "instant": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Batch send size sum: {{processor}}",
                  "refId": "A"
                }
              ],
              "title": "Batch Metrics",
              "type": "timeseries"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Number of units in the batch",
              "fieldConfig": {
                "defaults": {
                  "custom": {
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "scaleDistribution": {
                      "type": "linear"
                    }
                  },
                  "links": []
                },
                "overrides": []
              },
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 8,
                "y": 18
              },
              "id": 49,
              "interval": "$minstep",
              "links": [],
              "maxDataPoints": 50,
              "options": {
                "calculate": false,
                "cellGap": 1,
                "color": {
                  "exponent": 0.5,
                  "fill": "dark-orange",
                  "mode": "scheme",
                  "reverse": true,
                  "scale": "exponential",
                  "scheme": "Reds",
                  "steps": 57
                },
                "exemplars": {
                  "color": "rgba(255,0,255,0.7)"
                },
                "filterValues": {
                  "le": 1e-9
                },
                "legend": {
                  "show": true
                },
                "rowsFrame": {
                  "layout": "auto"
                },
                "tooltip": {
                  "show": true,
                  "yHistogram": false
                },
                "yAxis": {
                  "axisPlacement": "left",
                  "reverse": false
                }
              },
              "pluginVersion": "10.0.3",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(increase(otelcol_processor_batch_batch_send_size_bucket{processor=~\"$processor\",job=\"$job\"}[$__rate_interval])) by (le)",
                  "format": "heatmap",
                  "hide": false,
                  "instant": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "{{le}}",
                  "refId": "B"
                }
              ],
              "title": "Batch Send Size Heatmap",
              "type": "heatmap"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Number of times the batch was sent due to a size trigger. Number of times the batch was sent due to a timeout trigger.",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisCenteredZero": false,
                    "axisColorMode": "text",
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "never",
                    "spanNulls": true,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "links": [],
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "short"
                },
                "overrides": [
                  {
                    "matcher": {
                      "id": "byRegexp",
                      "options": "/.*Refused.*/"
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "red",
                          "mode": "fixed"
                        }
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byRegexp",
                      "options": "/.*Dropped.*/"
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "purple",
                          "mode": "fixed"
                        }
                      }
                    ]
                  }
                ]
              },
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 16,
                "y": 18
              },
              "id": 56,
              "interval": "$minstep",
              "links": [],
              "options": {
                "legend": {
                  "calcs": [
                    "min",
                    "max",
                    "mean"
                  ],
                  "displayMode": "table",
                  "placement": "bottom",
                  "showLegend": true
                },
                "tooltip": {
                  "mode": "multi",
                  "sort": "none"
                }
              },
              "pluginVersion": "8.3.5",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_processor_batch_batch_size_trigger_send{processor=~\"$processor\",job=\"$job\"}[$__rate_interval])) by (processor)",
                  "format": "time_series",
                  "hide": false,
                  "instant": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Batch sent due to a size trigger: {{processor}}",
                  "refId": "B"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_processor_batch_timeout_trigger_send{processor=~\"$processor\"}[$__rate_interval])) by (processor)",
                  "format": "time_series",
                  "hide": false,
                  "instant": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Batch sent due to a timeout trigger: {{processor}}",
                  "refId": "A"
                }
              ],
              "title": "Batch Metrics",
              "type": "timeseries"
            },
            {
              "collapsed": false,
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 26
              },
              "id": 25,
              "panels": [],
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "refId": "A"
                }
              ],
              "title": "Exporters",
              "type": "row"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Sent: count/rate of spans successfully sent to destination.\nEngueue: count/rate of spans failed to be added to the sending queue.",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisCenteredZero": false,
                    "axisColorMode": "text",
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "never",
                    "spanNulls": true,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "links": [],
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "short"
                },
                "overrides": [
                  {
                    "matcher": {
                      "id": "byRegexp",
                      "options": "/Failed:.*/"
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "red",
                          "mode": "fixed"
                        }
                      }
                    ]
                  }
                ]
              },
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 0,
                "y": 27
              },
              "id": 37,
              "interval": "$minstep",
              "links": [],
              "options": {
                "legend": {
                  "calcs": [
                    "min",
                    "max",
                    "mean"
                  ],
                  "displayMode": "table",
                  "placement": "bottom",
                  "showLegend": true
                },
                "tooltip": {
                  "mode": "multi",
                  "sort": "none"
                }
              },
              "pluginVersion": "8.3.5",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_exporter_sent_spans{exporter=~\"$exporter\",job=\"$job\"}[$__rate_interval])) by (exporter $grouping)",
                  "format": "time_series",
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Sent: {{exporter}} {{service_instance_id}}",
                  "range": true,
                  "refId": "A"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_exporter_enqueue_failed_spans{exporter=~\"$exporter\",job=\"$job\"}[$__rate_interval])) by (exporter $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Enqueue: {{exporter}} {{service_instance_id}}",
                  "range": true,
                  "refId": "B"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_exporter_send_failed_spans{exporter=~\"$exporter\",job=\"$job\"}[$__rate_interval])) by (exporter $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Failed: {{exporter}} {{service_instance_id}}",
                  "range": true,
                  "refId": "C"
                }
              ],
              "title": "Spans ${metric:text}",
              "type": "timeseries"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Sent: count/rate of metric points successfully sent to destination.\nEngueue: count/rate of metric points failed to be added to the sending queue.",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisCenteredZero": false,
                    "axisColorMode": "text",
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "never",
                    "spanNulls": true,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "links": [],
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "short"
                },
                "overrides": [
                  {
                    "matcher": {
                      "id": "byRegexp",
                      "options": "/Failed:.*/"
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "red",
                          "mode": "fixed"
                        }
                      }
                    ]
                  }
                ]
              },
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 8,
                "y": 27
              },
              "id": 38,
              "interval": "$minstep",
              "links": [],
              "options": {
                "legend": {
                  "calcs": [
                    "min",
                    "max",
                    "mean"
                  ],
                  "displayMode": "table",
                  "placement": "bottom",
                  "showLegend": true
                },
                "tooltip": {
                  "mode": "multi",
                  "sort": "none"
                }
              },
              "pluginVersion": "8.3.5",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_exporter_sent_metric_points{exporter=~\"$exporter\",job=\"$job\"}[$__rate_interval])) by (exporter $grouping)",
                  "format": "time_series",
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Sent: {{exporter}} {{service_instance_id}}",
                  "range": true,
                  "refId": "A"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_exporter_enqueue_failed_metric_points{exporter=~\"$exporter\",job=\"$job\"}[$__rate_interval])) by (exporter $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Enqueue: {{exporter}} {{service_instance_id}}",
                  "range": true,
                  "refId": "B"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_exporter_send_failed_metric_points{exporter=~\"$exporter\",job=\"$job\"}[$__rate_interval])) by (exporter $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Failed: {{exporter}} {{service_instance_id}}",
                  "range": true,
                  "refId": "C"
                }
              ],
              "title": "Metric Points ${metric:text}",
              "type": "timeseries"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Sent: count/rate of log records successfully sent to destination.\nEngueue: count/rate of log records failed to be added to the sending queue.",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisCenteredZero": false,
                    "axisColorMode": "text",
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "never",
                    "spanNulls": true,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "links": [],
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "short"
                },
                "overrides": [
                  {
                    "matcher": {
                      "id": "byRegexp",
                      "options": "/Failed:.*/"
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "red",
                          "mode": "fixed"
                        }
                      }
                    ]
                  }
                ]
              },
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 16,
                "y": 27
              },
              "id": 48,
              "interval": "$minstep",
              "links": [],
              "options": {
                "legend": {
                  "calcs": [
                    "min",
                    "max",
                    "mean"
                  ],
                  "displayMode": "table",
                  "placement": "bottom",
                  "showLegend": true
                },
                "tooltip": {
                  "mode": "multi",
                  "sort": "none"
                }
              },
              "pluginVersion": "8.3.5",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_exporter_sent_log_records{exporter=~\"$exporter\",job=\"$job\"}[$__rate_interval])) by (exporter $grouping)",
                  "format": "time_series",
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Sent: {{exporter}} {{service_instance_id}}",
                  "range": true,
                  "refId": "A"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_exporter_enqueue_failed_log_records{exporter=~\"$exporter\",job=\"$job\"}[$__rate_interval])) by (exporter $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Enqueue: {{exporter}} {{service_instance_id}}",
                  "range": true,
                  "refId": "B"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "sum(${metric:value}(otelcol_exporter_send_failed_log_records{exporter=~\"$exporter\",job=\"$job\"}[$__rate_interval])) by (exporter $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Failed: {{exporter}} {{service_instance_id}}",
                  "range": true,
                  "refId": "C"
                }
              ],
              "title": "Log Records ${metric:text}",
              "type": "timeseries"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Current size of the retry queue (in batches)",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisCenteredZero": false,
                    "axisColorMode": "text",
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "never",
                    "spanNulls": true,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "links": [],
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "short"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 36
              },
              "id": 10,
              "links": [],
              "options": {
                "legend": {
                  "calcs": [
                    "min",
                    "max",
                    "mean"
                  ],
                  "displayMode": "table",
                  "placement": "bottom",
                  "showLegend": true
                },
                "tooltip": {
                  "mode": "multi",
                  "sort": "none"
                }
              },
              "pluginVersion": "8.3.5",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "max(otelcol_exporter_queue_size{exporter=~\"$exporter\",job=\"$job\"}) by (exporter)",
                  "format": "time_series",
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Max queue size: {{exporter}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Exporter Queue Size",
              "type": "timeseries"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Fixed capacity of the retry queue (in batches)",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisCenteredZero": false,
                    "axisColorMode": "text",
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "never",
                    "spanNulls": true,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "links": [],
                  "mappings": [],
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "short"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 12,
                "y": 36
              },
              "id": 55,
              "links": [],
              "options": {
                "legend": {
                  "calcs": [
                    "min",
                    "max",
                    "mean"
                  ],
                  "displayMode": "table",
                  "placement": "bottom",
                  "showLegend": true
                },
                "tooltip": {
                  "mode": "multi",
                  "sort": "none"
                }
              },
              "pluginVersion": "8.3.5",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "min(otelcol_exporter_queue_capacity{exporter=~\"$exporter\",job=\"$job\"}) by (exporter)",
                  "format": "time_series",
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Queue capacity: {{exporter}}",
                  "range": true,
                  "refId": "A"
                }
              ],
              "title": "Exporter Queue Capacity",
              "type": "timeseries"
            },
            {
              "collapsed": false,
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 45
              },
              "id": 21,
              "panels": [],
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "refId": "A"
                }
              ],
              "title": "Collector",
              "type": "row"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Total physical memory (resident set size)",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisCenteredZero": false,
                    "axisColorMode": "text",
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "never",
                    "spanNulls": true,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "links": [],
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "bytes"
                },
                "overrides": [
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "Max Memory RSS "
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "red",
                          "mode": "fixed"
                        }
                      },
                      {
                        "id": "custom.fillBelowTo",
                        "value": "Avg Memory RSS "
                      },
                      {
                        "id": "custom.lineWidth",
                        "value": 0
                      },
                      {
                        "id": "custom.fillOpacity",
                        "value": 20
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "Min Memory RSS "
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "yellow",
                          "mode": "fixed"
                        }
                      },
                      {
                        "id": "custom.lineWidth",
                        "value": 0
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "Avg Memory RSS "
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "orange",
                          "mode": "fixed"
                        }
                      },
                      {
                        "id": "custom.fillBelowTo",
                        "value": "Min Memory RSS "
                      },
                      {
                        "id": "custom.fillOpacity",
                        "value": 20
                      }
                    ]
                  }
                ]
              },
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 0,
                "y": 46
              },
              "id": 40,
              "interval": "$minstep",
              "links": [],
              "options": {
                "legend": {
                  "calcs": [
                    "min",
                    "max",
                    "mean"
                  ],
                  "displayMode": "table",
                  "placement": "bottom",
                  "showLegend": true
                },
                "tooltip": {
                  "mode": "multi",
                  "sort": "none"
                }
              },
              "pluginVersion": "8.3.5",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "max(otelcol_process_memory_rss{job=\"$job\"}) by (job $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Max Memory RSS {{service_instance_id}}",
                  "range": true,
                  "refId": "C"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "avg(otelcol_process_memory_rss{job=\"$job\"}) by (job $grouping)",
                  "format": "time_series",
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Avg Memory RSS {{service_instance_id}}",
                  "range": true,
                  "refId": "A"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "min(otelcol_process_memory_rss{job=\"$job\"}) by (job $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Min Memory RSS {{service_instance_id}}",
                  "range": true,
                  "refId": "B"
                }
              ],
              "title": "Total RSS Memory",
              "type": "timeseries"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Total bytes of memory obtained from the OS (see 'go doc runtime.MemStats.Sys')",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisCenteredZero": false,
                    "axisColorMode": "text",
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "never",
                    "spanNulls": true,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "links": [],
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "bytes"
                },
                "overrides": [
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "Max Memory RSS "
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "red",
                          "mode": "fixed"
                        }
                      },
                      {
                        "id": "custom.fillBelowTo",
                        "value": "Avg Memory RSS "
                      },
                      {
                        "id": "custom.lineWidth",
                        "value": 0
                      },
                      {
                        "id": "custom.fillOpacity",
                        "value": 20
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "Min Memory RSS "
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "yellow",
                          "mode": "fixed"
                        }
                      },
                      {
                        "id": "custom.lineWidth",
                        "value": 0
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "Avg Memory RSS "
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "orange",
                          "mode": "fixed"
                        }
                      },
                      {
                        "id": "custom.fillBelowTo",
                        "value": "Min Memory RSS "
                      },
                      {
                        "id": "custom.fillOpacity",
                        "value": 20
                      }
                    ]
                  }
                ]
              },
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 8,
                "y": 46
              },
              "id": 52,
              "interval": "$minstep",
              "links": [],
              "options": {
                "legend": {
                  "calcs": [
                    "min",
                    "max",
                    "mean"
                  ],
                  "displayMode": "table",
                  "placement": "bottom",
                  "showLegend": true
                },
                "tooltip": {
                  "mode": "multi",
                  "sort": "none"
                }
              },
              "pluginVersion": "8.3.5",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "max(otelcol_process_runtime_total_sys_memory_bytes{job=\"$job\"}) by (job $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Max Memory RSS {{service_instance_id}}",
                  "range": true,
                  "refId": "C"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "avg(otelcol_process_runtime_total_sys_memory_bytes{job=\"$job\"}) by (job $grouping)",
                  "format": "time_series",
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Avg Memory RSS {{service_instance_id}}",
                  "range": true,
                  "refId": "A"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "min(otelcol_process_runtime_total_sys_memory_bytes{job=\"$job\"}) by (job $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Min Memory RSS {{service_instance_id}}",
                  "range": true,
                  "refId": "B"
                }
              ],
              "title": "Total Runtime Sys Memory",
              "type": "timeseries"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Bytes of allocated heap objects (see 'go doc runtime.MemStats.HeapAlloc')",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisCenteredZero": false,
                    "axisColorMode": "text",
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "never",
                    "spanNulls": true,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "links": [],
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "bytes"
                },
                "overrides": [
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "Max Memory RSS "
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "red",
                          "mode": "fixed"
                        }
                      },
                      {
                        "id": "custom.fillBelowTo",
                        "value": "Avg Memory RSS "
                      },
                      {
                        "id": "custom.lineWidth",
                        "value": 0
                      },
                      {
                        "id": "custom.fillOpacity",
                        "value": 20
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "Min Memory RSS "
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "yellow",
                          "mode": "fixed"
                        }
                      },
                      {
                        "id": "custom.lineWidth",
                        "value": 0
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "Avg Memory RSS "
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "orange",
                          "mode": "fixed"
                        }
                      },
                      {
                        "id": "custom.fillBelowTo",
                        "value": "Min Memory RSS "
                      },
                      {
                        "id": "custom.fillOpacity",
                        "value": 20
                      }
                    ]
                  }
                ]
              },
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 16,
                "y": 46
              },
              "id": 53,
              "interval": "$minstep",
              "links": [],
              "options": {
                "legend": {
                  "calcs": [
                    "min",
                    "max",
                    "mean"
                  ],
                  "displayMode": "table",
                  "placement": "bottom",
                  "showLegend": true
                },
                "tooltip": {
                  "mode": "multi",
                  "sort": "none"
                }
              },
              "pluginVersion": "8.3.5",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "max(otelcol_process_runtime_heap_alloc_bytes{job=\"$job\"}) by (job $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Max Memory RSS {{service_instance_id}}",
                  "range": true,
                  "refId": "C"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "avg(otelcol_process_runtime_heap_alloc_bytes{job=\"$job\"}) by (job $grouping)",
                  "format": "time_series",
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Avg Memory RSS {{service_instance_id}}",
                  "range": true,
                  "refId": "A"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "min(otelcol_process_runtime_heap_alloc_bytes{job=\"$job\"}) by (job $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Min Memory RSS {{service_instance_id}}",
                  "range": true,
                  "refId": "B"
                }
              ],
              "title": "Total Runtime Heap Memory",
              "type": "timeseries"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Total CPU user and system time in percentage",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisCenteredZero": false,
                    "axisColorMode": "text",
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "never",
                    "spanNulls": true,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "links": [],
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "percent"
                },
                "overrides": [
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "Max CPU usage "
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "red",
                          "mode": "fixed"
                        }
                      },
                      {
                        "id": "custom.fillBelowTo",
                        "value": "Avg CPU usage "
                      },
                      {
                        "id": "custom.lineWidth",
                        "value": 0
                      },
                      {
                        "id": "custom.fillOpacity",
                        "value": 20
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "Avg CPU usage "
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "orange",
                          "mode": "fixed"
                        }
                      },
                      {
                        "id": "custom.fillBelowTo",
                        "value": "Min CPU usage "
                      }
                    ]
                  },
                  {
                    "matcher": {
                      "id": "byName",
                      "options": "Min CPU usage "
                    },
                    "properties": [
                      {
                        "id": "color",
                        "value": {
                          "fixedColor": "yellow",
                          "mode": "fixed"
                        }
                      },
                      {
                        "id": "custom.lineWidth",
                        "value": 0
                      }
                    ]
                  }
                ]
              },
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 0,
                "y": 55
              },
              "id": 39,
              "interval": "$minstep",
              "links": [],
              "options": {
                "legend": {
                  "calcs": [
                    "min",
                    "max",
                    "mean"
                  ],
                  "displayMode": "table",
                  "placement": "bottom",
                  "showLegend": true
                },
                "tooltip": {
                  "mode": "multi",
                  "sort": "none"
                }
              },
              "pluginVersion": "8.3.5",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "max(rate(otelcol_process_cpu_seconds{job=\"$job\"}[$__rate_interval])*100) by (job $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Max CPU usage {{service_instance_id}}",
                  "range": true,
                  "refId": "B"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "avg(rate(otelcol_process_cpu_seconds{job=\"$job\"}[$__rate_interval])*100) by (job $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Avg CPU usage {{service_instance_id}}",
                  "range": true,
                  "refId": "A"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "min(rate(otelcol_process_cpu_seconds{job=\"$job\"}[$__rate_interval])*100) by (job $grouping)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Min CPU usage {{service_instance_id}}",
                  "range": true,
                  "refId": "C"
                }
              ],
              "title": "CPU Usage",
              "type": "timeseries"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Number of service instances, which are reporting metrics",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisCenteredZero": false,
                    "axisColorMode": "text",
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "never",
                    "spanNulls": true,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "links": [],
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "short"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 8,
                "y": 55
              },
              "id": 41,
              "interval": "$minstep",
              "links": [],
              "options": {
                "legend": {
                  "calcs": [
                    "min",
                    "max",
                    "mean"
                  ],
                  "displayMode": "table",
                  "placement": "bottom",
                  "showLegend": true
                },
                "tooltip": {
                  "mode": "multi",
                  "sort": "none"
                }
              },
              "pluginVersion": "8.3.5",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "count(count(otelcol_process_cpu_seconds{service_instance_id=~\".*\",job=\"$job\"}) by (service_instance_id))",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Service instance count",
                  "range": true,
                  "refId": "B"
                }
              ],
              "title": "Service Instance Count",
              "type": "timeseries"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "palette-classic"
                  },
                  "custom": {
                    "axisCenteredZero": false,
                    "axisColorMode": "text",
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {
                      "legend": false,
                      "tooltip": false,
                      "viz": false
                    },
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {
                      "type": "linear"
                    },
                    "showPoints": "never",
                    "spanNulls": true,
                    "stacking": {
                      "group": "A",
                      "mode": "none"
                    },
                    "thresholdsStyle": {
                      "mode": "off"
                    }
                  },
                  "links": [],
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "s"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 16,
                "y": 55
              },
              "id": 54,
              "interval": "$minstep",
              "links": [],
              "options": {
                "legend": {
                  "calcs": [
                    "min",
                    "max",
                    "mean"
                  ],
                  "displayMode": "table",
                  "placement": "bottom",
                  "showLegend": true
                },
                "tooltip": {
                  "mode": "multi",
                  "sort": "none"
                }
              },
              "pluginVersion": "8.3.5",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": true,
                  "expr": "max(otelcol_process_uptime{service_instance_id=~\".*\",job=\"$job\"}) by (service_instance_id)",
                  "format": "time_series",
                  "hide": false,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "Service instance uptime: {{service_instance_id}}",
                  "range": true,
                  "refId": "B"
                }
              ],
              "title": "Uptime by Service Instance",
              "type": "timeseries"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "",
              "fieldConfig": {
                "defaults": {
                  "color": {
                    "mode": "thresholds"
                  },
                  "custom": {
                    "align": "auto",
                    "cellOptions": {
                      "type": "auto"
                    },
                    "inspect": false
                  },
                  "links": [],
                  "mappings": [],
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "red",
                        "value": 80
                      }
                    ]
                  },
                  "unit": "s"
                },
                "overrides": []
              },
              "gridPos": {
                "h": 5,
                "w": 24,
                "x": 0,
                "y": 64
              },
              "id": 57,
              "interval": "$minstep",
              "links": [],
              "options": {
                "cellHeight": "sm",
                "footer": {
                  "countRows": false,
                  "fields": "",
                  "reducer": [
                    "sum"
                  ],
                  "show": false
                },
                "showHeader": true
              },
              "pluginVersion": "10.0.3",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "max(otelcol_process_uptime{service_instance_id=~\".*\",job=\"$job\"}) by (service_instance_id,service_name,service_version)",
                  "format": "table",
                  "hide": false,
                  "instant": true,
                  "interval": "$minstep",
                  "intervalFactor": 1,
                  "legendFormat": "__auto",
                  "range": false,
                  "refId": "B"
                }
              ],
              "title": "Service Instance Details",
              "transformations": [
                {
                  "id": "organize",
                  "options": {
                    "excludeByName": {
                      "Time": true,
                      "Value": true
                    },
                    "indexByName": {},
                    "renameByName": {}
                  }
                }
              ],
              "type": "table"
            },
            {
              "collapsed": false,
              "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 69
              },
              "id": 59,
              "panels": [],
              "title": "Data Flows",
              "type": "row"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Receivers -> Processor(s) -> Exporters (Node Graph panel is beta, so this panel may not show data correctly).",
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 0,
                "y": 70
              },
              "id": 58,
              "options": {
                "nodes": {
                  "mainStatUnit": "flops"
                }
              },
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "# receivers\nlabel_replace(\n  label_join(\n    label_join(\n      sum(${metric:value}(\n        otelcol_receiver_accepted_spans{receiver=~\"$receiver\",job=\"$job\"}[$__rate_interval])\n      ) by (receiver)\n      , \"id\", \"-rcv-\", \"transport\", \"receiver\"\n    )\n    , \"title\", \"\", \"transport\", \"receiver\"\n  )\n  , \"icon\", \"arrow-to-right\", \"\", \"\"\n)\n\n# dummy processor\nor\nlabel_replace(\n  label_replace(\n    label_replace(\n      (sum(rate(otelcol_process_uptime{job=\"$job\"}[$__interval])))\n      , \"id\", \"processor\", \"\", \"\"\n    )\n    , \"title\", \"Processor(s)\", \"\", \"\"\n  )\n  , \"icon\", \"arrow-random\", \"\", \"\"\n)\n\n# exporters\nor\nlabel_replace(\n  label_join(\n    label_join(\n      sum(${metric:value}(\n        otelcol_exporter_sent_spans{exporter=~\"$exporter\",job=\"$job\"}[$__rate_interval])\n      ) by (exporter)\n      , \"id\", \"-exp-\", \"transport\", \"exporter\"\n    )\n    , \"title\", \"\", \"transport\", \"exporter\"\n  )\n  , \"icon\", \"arrow-from-right\", \"\", \"\"\n)",
                  "format": "table",
                  "hide": false,
                  "instant": true,
                  "legendFormat": "__auto",
                  "range": false,
                  "refId": "nodes"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "# receivers -> processor\r\nlabel_join(\r\n    label_replace(\r\n        label_join(\r\n            (sum(rate(otelcol_receiver_accepted_spans{job=\"$job\"}[$__interval])) by (receiver))\r\n            ,\"source\", \"-rcv-\", \"transport\", \"receiver\"\r\n        )\r\n        ,\"target\", \"processor\", \"\", \"\"\r\n    )\r\n    , \"id\", \"-\", \"source\", \"target\"\r\n)\r\n\r\n# processor -> exporters\r\nor\r\nlabel_join(\r\n    label_replace(\r\n        label_join(\r\n            (sum(rate(otelcol_exporter_sent_spans{job=\"$job\"}[$__interval])) by (exporter))\r\n            , \"target\", \"-exp-\", \"transport\", \"exporter\"\r\n        )\r\n        , \"source\", \"processor\", \"\", \"\"\r\n    )\r\n    , \"id\", \"-\", \"source\", \"target\"\r\n)",
                  "format": "table",
                  "hide": false,
                  "instant": true,
                  "legendFormat": "__auto",
                  "range": false,
                  "refId": "edges"
                }
              ],
              "title": "Spans Flow",
              "transformations": [
                {
                  "id": "renameByRegex",
                  "options": {
                    "regex": "Value",
                    "renamePattern": "mainstat"
                  }
                },
                {
                  "disabled": true,
                  "id": "calculateField",
                  "options": {
                    "alias": "secondarystat",
                    "mode": "reduceRow",
                    "reduce": {
                      "include": [
                        "mainstat"
                      ],
                      "reducer": "sum"
                    }
                  }
                }
              ],
              "type": "nodeGraph"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Receivers -> Processor(s) -> Exporters (Node Graph panel is beta, so this panel may not show data correctly).",
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 8,
                "y": 70
              },
              "id": 60,
              "options": {
                "nodes": {
                  "mainStatUnit": "none"
                }
              },
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "# receivers\nlabel_replace(\n  label_join(\n    label_join(\n      (sum(\n        ${metric:value}(otelcol_receiver_accepted_metric_points{receiver=~\"$receiver\",job=\"$job\"}[$__rate_interval])\n      ) by (receiver))\n      , \"id\", \"-rcv-\", \"transport\", \"receiver\"\n    )\n    , \"title\", \"\", \"transport\", \"receiver\"\n  )\n  , \"icon\", \"arrow-to-right\", \"\", \"\"\n)\n\n# dummy processor\nor\nlabel_replace(\n  label_replace(\n    label_replace(\n      (sum(rate(otelcol_process_uptime{job=\"$job\"}[$__interval])))\n      , \"id\", \"processor\", \"\", \"\"\n    )\n    , \"title\", \"Processor(s)\", \"\", \"\"\n  )\n  , \"icon\", \"arrow-random\", \"\", \"\"\n)\n\n# exporters\nor\nlabel_replace(\n  label_join(\n    label_join(\n      (sum(\n        ${metric:value}(otelcol_exporter_sent_metric_points{exporter=~\"$exporter\",job=\"$job\"}[$__rate_interval])\n      ) by (exporter))\n      , \"id\", \"-exp-\", \"transport\", \"exporter\"\n    )\n    , \"title\", \"\", \"transport\", \"exporter\"\n  )\n  , \"icon\", \"arrow-from-right\", \"\", \"\"\n)",
                  "format": "table",
                  "hide": false,
                  "instant": true,
                  "legendFormat": "__auto",
                  "range": false,
                  "refId": "nodes"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "# receivers -> processor\r\nlabel_join(\r\n    label_replace(\r\n        label_join(\r\n            (sum(rate(otelcol_receiver_accepted_metric_points{job=\"$job\"}[$__interval])) by (receiver))\r\n            , \"source\", \"-rcv-\", \"transport\", \"receiver\"\r\n        )\r\n        , \"target\", \"processor\", \"\", \"\"\r\n    )\r\n    , \"id\", \"-\", \"source\", \"target\"\r\n)\r\n\r\n# processor -> exporters\r\nor \r\nlabel_join(\r\n    label_replace(\r\n        label_join(\r\n            (sum(rate(otelcol_exporter_sent_metric_points{job=\"$job\"}[$__interval])) by (exporter))\r\n            , \"target\", \"-exp-\", \"transport\", \"exporter\"\r\n        )\r\n        , \"source\", \"processor\", \"\", \"\"\r\n    )\r\n    , \"id\", \"-\", \"source\", \"target\"\r\n)",
                  "format": "table",
                  "hide": false,
                  "instant": true,
                  "legendFormat": "__auto",
                  "range": false,
                  "refId": "edges"
                }
              ],
              "title": "Metric Points Flow",
              "transformations": [
                {
                  "id": "renameByRegex",
                  "options": {
                    "regex": "Value",
                    "renamePattern": "mainstat"
                  }
                },
                {
                  "disabled": true,
                  "id": "calculateField",
                  "options": {
                    "alias": "secondarystat",
                    "mode": "reduceRow",
                    "reduce": {
                      "include": [
                        "Value #nodes"
                      ],
                      "reducer": "sum"
                    }
                  }
                }
              ],
              "type": "nodeGraph"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "description": "Receivers -> Processor(s) -> Exporters (Node Graph panel is beta, so this panel may not show data correctly).",
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 16,
                "y": 70
              },
              "id": 61,
              "options": {
                "nodes": {
                  "mainStatUnit": "flops"
                }
              },
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "# receivers\nlabel_replace(\n  label_join(\n    label_join(\n      sum(${metric:value}(\n        otelcol_receiver_accepted_log_records{receiver=~\"$receiver\",job=\"$job\"}[$__rate_interval])\n      ) by (receiver)\n      , \"id\", \"-rcv-\", \"transport\", \"receiver\"\n    )\n    , \"title\", \"\", \"transport\", \"receiver\"\n  )\n  , \"icon\", \"arrow-to-right\", \"\", \"\"\n)\n\n# dummy processor\nor\nlabel_replace(\n  label_replace(\n    label_replace(\n      (sum(rate(otelcol_process_uptime{job=\"$job\"}[$__interval])))\n      , \"id\", \"processor\", \"\", \"\"\n    )\n    , \"title\", \"Processor(s)\", \"\", \"\"\n  )\n  , \"icon\", \"arrow-random\", \"\", \"\"\n)\n\n# exporters\nor\nlabel_replace(\n  label_join(\n    label_join(\n      sum(${metric:value}(\n        otelcol_exporter_sent_log_records{exporter=~\"$exporter\",job=\"$job\"}[$__rate_interval])\n      ) by (exporter)\n      , \"id\", \"-exp-\", \"transport\", \"exporter\"\n    )\n    , \"title\", \"\", \"transport\", \"exporter\"\n  )\n  , \"icon\", \"arrow-from-right\", \"\", \"\"\n)",
                  "format": "table",
                  "hide": false,
                  "instant": true,
                  "legendFormat": "__auto",
                  "range": false,
                  "refId": "nodes"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "editorMode": "code",
                  "exemplar": false,
                  "expr": "# receivers -> processor\r\nlabel_join(\r\n    label_replace(\r\n        label_join(\r\n            (sum(rate(otelcol_receiver_accepted_log_records{job=\"$job\"}[$__interval])) by (receiver))\r\n            , \"source\", \"-rcv-\", \"transport\", \"receiver\"\r\n        )\r\n        , \"target\", \"processor\", \"\", \"\"\r\n    )\r\n    , \"id\", \"-edg-\", \"source\", \"target\"\r\n)\r\n\r\n# processor -> exporters\r\nor \r\nlabel_join(\r\n    label_replace(\r\n        label_join(\r\n            (sum(rate(otelcol_exporter_sent_log_records{job=\"$job\"}[$__interval])) by (exporter))\r\n            ,\"target\",\"-exp-\",\"transport\",\"exporter\"\r\n        )\r\n        ,\"source\",\"processor\",\"\",\"\"\r\n    )\r\n    ,\"id\",\"-edg-\",\"source\",\"target\"\r\n)",
                  "format": "table",
                  "hide": false,
                  "instant": true,
                  "legendFormat": "__auto",
                  "range": false,
                  "refId": "edges"
                }
              ],
              "title": "Log Records Flow",
              "transformations": [
                {
                  "id": "renameByRegex",
                  "options": {
                    "regex": "Value",
                    "renamePattern": "mainstat"
                  }
                },
                {
                  "disabled": true,
                  "id": "calculateField",
                  "options": {
                    "alias": "secondarystat",
                    "mode": "reduceRow",
                    "reduce": {
                      "include": [
                        "mainstat"
                      ],
                      "reducer": "sum"
                    }
                  }
                }
              ],
              "type": "nodeGraph"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "$datasource"
              },
              "editable": true,
              "error": false,
              "gridPos": {
                "h": 3,
                "w": 24,
                "x": 0,
                "y": 79
              },
              "id": 45,
              "links": [],
              "options": {
                "code": {
                  "language": "plaintext",
                  "showLineNumbers": false,
                  "showMiniMap": false
                },
                "content": "<a href=\"http://www.monitoringartist.com\" target=\"_blank\" title=\"Dashboard maintained by Monitoring Artist - DevOps / Docker / Kubernetes / AWS ECS / Google GCP / Zabbix / Zenoss / Terraform / Monitoring\"><img src=\"https://monitoringartist.github.io/monitoring-artist-logo-grafana.png\" height=\"30px\" /></a> | \n<a target=\"_blank\" href=\"https://github.com/open-telemetry/opentelemetry-collector/blob/main/docs/troubleshooting.md#metrics\">OTEL collector troubleshooting (how to enable telemetry metrics)</a> | \n<a target=\"_blank\" href=\"https://opentelemetry.io/docs/collector/scaling/\">Scaling the Collector (metrics to watch)</a> | \n<a target=\"_blank\" href=\"https://grafana.com/grafana/dashboards/15983-opentelemetry-collector/\">Installed from Grafana.com dashboards</a>",
                "mode": "html"
              },
              "pluginVersion": "10.0.3",
              "targets": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "$datasource"
                  },
                  "refId": "A"
                }
              ],
              "title": "Documentation",
              "type": "text"
            }
          ],
          "refresh": "10s",
          "schemaVersion": 38,
          "style": "dark",
          "tags": [
            "opentelemetry",
            "monitoring"
          ],
          "templating": {
            "list": [
              {
                "current": {},
                "hide": 0,
                "includeAll": false,
                "label": "Datasource",
                "multi": false,
                "name": "datasource",
                "options": [],
                "query": "prometheus",
                "queryValue": "",
                "refresh": 1,
                "regex": "",
                "skipUrlSync": false,
                "type": "datasource"
              },
              {
                "current": {},
                "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
                },
                "definition": "label_values(otelcol_process_uptime, job)",
                "hide": 0,
                "includeAll": false,
                "label": "Job",
                "multi": false,
                "name": "job",
                "options": [],
                "query": {
                  "query": "label_values(otelcol_process_uptime, job)",
                  "refId": "StandardVariableQuery"
                },
                "refresh": 1,
                "regex": "",
                "skipUrlSync": false,
                "sort": 1,
                "type": "query"
              },
              {
                "auto": true,
                "auto_count": 300,
                "auto_min": "10s",
                "current": {
                  "selected": false,
                  "text": "auto",
                  "value": "$__auto_interval_minstep"
                },
                "hide": 0,
                "label": "Min step",
                "name": "minstep",
                "options": [
                  {
                    "selected": true,
                    "text": "auto",
                    "value": "$__auto_interval_minstep"
                  },
                  {
                    "selected": false,
                    "text": "10s",
                    "value": "10s"
                  },
                  {
                    "selected": false,
                    "text": "30s",
                    "value": "30s"
                  },
                  {
                    "selected": false,
                    "text": "1m",
                    "value": "1m"
                  },
                  {
                    "selected": false,
                    "text": "5m",
                    "value": "5m"
                  }
                ],
                "query": "10s,30s,1m,5m",
                "queryValue": "",
                "refresh": 2,
                "skipUrlSync": false,
                "type": "interval"
              },
              {
                "current": {
                  "selected": true,
                  "text": "Rate",
                  "value": "rate"
                },
                "hide": 0,
                "includeAll": false,
                "label": "Base metric",
                "multi": false,
                "name": "metric",
                "options": [
                  {
                    "selected": true,
                    "text": "Rate",
                    "value": "rate"
                  },
                  {
                    "selected": false,
                    "text": "Count",
                    "value": "increase"
                  }
                ],
                "query": "Rate : rate, Count : increase",
                "queryValue": "",
                "skipUrlSync": false,
                "type": "custom"
              },
              {
                "allValue": ".*",
                "current": {},
                "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
                },
                "definition": "label_values(receiver)",
                "hide": 0,
                "includeAll": true,
                "label": "Receiver",
                "multi": false,
                "name": "receiver",
                "options": [],
                "query": {
                  "query": "label_values(receiver)",
                  "refId": "StandardVariableQuery"
                },
                "refresh": 2,
                "regex": "",
                "skipUrlSync": false,
                "sort": 1,
                "tagValuesQuery": "",
                "tagsQuery": "",
                "type": "query",
                "useTags": false
              },
              {
                "current": {},
                "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
                },
                "definition": "label_values(processor)",
                "hide": 0,
                "includeAll": true,
                "label": "Processor",
                "multi": false,
                "name": "processor",
                "options": [],
                "query": {
                  "query": "label_values(processor)",
                  "refId": "StandardVariableQuery"
                },
                "refresh": 2,
                "regex": "",
                "skipUrlSync": false,
                "sort": 1,
                "tagValuesQuery": "",
                "tagsQuery": "",
                "type": "query",
                "useTags": false
              },
              {
                "allValue": ".*",
                "current": {},
                "datasource": {
                  "type": "prometheus",
                  "uid": "$datasource"
                },
                "definition": "label_values(exporter)",
                "hide": 0,
                "includeAll": true,
                "label": "Exporter",
                "multi": false,
                "name": "exporter",
                "options": [],
                "query": {
                  "query": "label_values(exporter)",
                  "refId": "StandardVariableQuery"
                },
                "refresh": 2,
                "regex": "",
                "skipUrlSync": false,
                "sort": 1,
                "tagValuesQuery": "",
                "tagsQuery": "",
                "type": "query",
                "useTags": false
              },
              {
                "current": {
                  "selected": true,
                  "text": "None (basic metrics)",
                  "value": ""
                },
                "description": "Detailed metrics must be configured in the collector configuration. They add grouping by transport protocol (http/grpc) for receivers. ",
                "hide": 0,
                "includeAll": false,
                "label": "Additional groupping",
                "multi": false,
                "name": "grouping",
                "options": [
                  {
                    "selected": true,
                    "text": "None (basic metrics)",
                    "value": ""
                  },
                  {
                    "selected": false,
                    "text": "By transport (detailed metrics)",
                    "value": ",transport"
                  },
                  {
                    "selected": false,
                    "text": "By service instance id",
                    "value": ",service_instance_id"
                  }
                ],
                "query": "None (basic metrics) :  , By transport (detailed metrics) : \\,transport, By service instance id : \\,service_instance_id",
                "queryValue": "",
                "skipUrlSync": false,
                "type": "custom"
              }
            ]
          },
          "time": {
            "from": "now-6h",
            "to": "now"
          },
          "timepicker": {
            "refresh_intervals": [
              "5s",
              "10s",
              "30s",
              "1m",
              "5m",
              "15m",
              "30m",
              "1h",
              "2h",
              "1d"
            ],
            "time_options": [
              "5m",
              "15m",
              "1h",
              "6h",
              "12h",
              "24h",
              "2d",
              "7d",
              "30d"
            ]
          },
          "timezone": "utc",
          "title": "OpenTelemetry Collector",
          "uid": "BKf2sowmj",
          "version": 72,
          "weekStart": ""
        }


## Reference to external ConfigMap per provider. Use provider name as key and ConfigMap name as value.
## A provider dashboards must be defined either by external ConfigMaps or in values.yaml, not in both.
## ConfigMap data example:
##
## data:
##   example-dashboard.json: |
##     RAW_JSON
##

dashboardsConfigMaps: {}
#  default: ""

## Grafana's primary configuration
## NOTE: values in map will be converted to ini format
## ref: http://docs.grafana.org/installation/configuration/
##
grafana.ini:
  paths:
    data: /var/lib/grafana/
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: true
  log:
    mode: console
  grafana_net:
    url: https://grafana.net
  server:
    domain: "{{ if (and .Values.ingress.enabled .Values.ingress.hosts) }}{{ .Values.ingress.hosts | first }}{{ else }}''{{ end }}"
## grafana Authentication can be enabled with the following values on grafana.ini
 # server:
      # The full public facing url you use in browser, used for redirects and emails
 #    root_url:
 # https://grafana.com/docs/grafana/latest/auth/github/#enable-github-in-grafana
 # auth.github:
 #    enabled: false
 #    allow_sign_up: false
 #    scopes: user:email,read:org
 #    auth_url: https://github.com/login/oauth/authorize
 #    token_url: https://github.com/login/oauth/access_token
 #    api_url: https://api.github.com/user
 #    team_ids:
 #    allowed_organizations:
 #    client_id:
 #    client_secret:
## LDAP Authentication can be enabled with the following values on grafana.ini
## NOTE: Grafana will fail to start if the value for ldap.toml is invalid
  # auth.ldap:
  #   enabled: true
  #   allow_sign_up: true
  #   config_file: /etc/grafana/ldap.toml

## Grafana's LDAP configuration
## Templated by the template in _helpers.tpl
## NOTE: To enable the grafana.ini must be configured with auth.ldap.enabled
## ref: http://docs.grafana.org/installation/configuration/#auth-ldap
## ref: http://docs.grafana.org/installation/ldap/#configuration
ldap:
  enabled: false
  # `existingSecret` is a reference to an existing secret containing the ldap configuration
  # for Grafana in a key `ldap-toml`.
  existingSecret: ""
  # `config` is the content of `ldap.toml` that will be stored in the created secret
  config: ""
  # config: |-
  #   verbose_logging = true

  #   [[servers]]
  #   host = "my-ldap-server"
  #   port = 636
  #   use_ssl = true
  #   start_tls = false
  #   ssl_skip_verify = false
  #   bind_dn = "uid=%s,ou=users,dc=myorg,dc=com"

## Grafana's SMTP configuration
## NOTE: To enable, grafana.ini must be configured with smtp.enabled
## ref: http://docs.grafana.org/installation/configuration/#smtp
smtp:
  # `existingSecret` is a reference to an existing secret containing the smtp configuration
  # for Grafana.
  existingSecret: ""
  userKey: "user"
  passwordKey: "password"

## Sidecars that collect the configmaps with specified label and stores the included files them into the respective folders
## Requires at least Grafana 5 to work and can't be used together with parameters dashboardProviders, datasources and dashboards
sidecar:
  image:
    # -- The Docker registry
    registry: quay.io
    repository: kiwigrid/k8s-sidecar
    tag: 1.25.2
    sha: ""
  imagePullPolicy: IfNotPresent
  resources: {}
#   limits:
#     cpu: 100m
#     memory: 100Mi
#   requests:
#     cpu: 50m
#     memory: 50Mi
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    seccompProfile:
      type: RuntimeDefault
  # skipTlsVerify Set to true to skip tls verification for kube api calls
  # skipTlsVerify: true
  enableUniqueFilenames: false
  readinessProbe: {}
  livenessProbe: {}
  # Log level default for all sidecars. Can be one of: DEBUG, INFO, WARN, ERROR, CRITICAL. Defaults to INFO
  # logLevel: INFO
  alerts:
    enabled: false
    # Additional environment variables for the alerts sidecar
    env: {}
    # Do not reprocess already processed unchanged resources on k8s API reconnect.
    # ignoreAlreadyProcessed: true
    # label that the configmaps with alert are marked with
    label: grafana_alert
    # value of label that the configmaps with alert are set to
    labelValue: ""
    # Log level. Can be one of: DEBUG, INFO, WARN, ERROR, CRITICAL.
    # logLevel: INFO
    # If specified, the sidecar will search for alert config-maps inside this namespace.
    # Otherwise the namespace in which the sidecar is running will be used.
    # It's also possible to specify ALL to search in all namespaces
    searchNamespace: null
    # Method to use to detect ConfigMap changes. With WATCH the sidecar will do a WATCH requests, with SLEEP it will list all ConfigMaps, then sleep for 60 seconds.
    watchMethod: WATCH
    # search in configmap, secret or both
    resource: both
    # watchServerTimeout: request to the server, asking it to cleanly close the connection after that.
    # defaults to 60sec; much higher values like 3600 seconds (1h) are feasible for non-Azure K8S
    # watchServerTimeout: 3600
    #
    # watchClientTimeout: is a client-side timeout, configuring your local socket.
    # If you have a network outage dropping all packets with no RST/FIN,
    # this is how long your client waits before realizing & dropping the connection.
    # defaults to 66sec (sic!)
    # watchClientTimeout: 60
    #
    # Endpoint to send request to reload alerts
    reloadURL: "http://localhost:3000/api/admin/provisioning/alerting/reload"
    # Absolute path to shell script to execute after a alert got reloaded
    script: null
    skipReload: false
    # This is needed if skipReload is true, to load any alerts defined at startup time.
    # Deploy the alert sidecar as an initContainer.
    initAlerts: false
    # Additional alert sidecar volume mounts
    extraMounts: []
    # Sets the size limit of the alert sidecar emptyDir volume
    sizeLimit: {}
  dashboards:
    enabled: false
    # Additional environment variables for the dashboards sidecar
    env: {}
    # Do not reprocess already processed unchanged resources on k8s API reconnect.
    # ignoreAlreadyProcessed: true
    SCProvider: true
    # label that the configmaps with dashboards are marked with
    label: grafana_dashboard
    # value of label that the configmaps with dashboards are set to
    labelValue: ""
    # Log level. Can be one of: DEBUG, INFO, WARN, ERROR, CRITICAL.
    # logLevel: INFO
    # folder in the pod that should hold the collected dashboards (unless `defaultFolderName` is set)
    folder: /tmp/dashboards
    # The default folder name, it will create a subfolder under the `folder` and put dashboards in there instead
    defaultFolderName: null
    # Namespaces list. If specified, the sidecar will search for config-maps/secrets inside these namespaces.
    # Otherwise the namespace in which the sidecar is running will be used.
    # It's also possible to specify ALL to search in all namespaces.
    searchNamespace: null
    # Method to use to detect ConfigMap changes. With WATCH the sidecar will do a WATCH requests, with SLEEP it will list all ConfigMaps, then sleep for 60 seconds.
    watchMethod: WATCH
    # search in configmap, secret or both
    resource: both
    # If specified, the sidecar will look for annotation with this name to create folder and put graph here.
    # You can use this parameter together with `provider.foldersFromFilesStructure`to annotate configmaps and create folder structure.
    folderAnnotation: null
    # Endpoint to send request to reload alerts
    reloadURL: "http://localhost:3000/api/admin/provisioning/dashboards/reload"
    # Absolute path to shell script to execute after a configmap got reloaded
    script: null
    skipReload: false
    # watchServerTimeout: request to the server, asking it to cleanly close the connection after that.
    # defaults to 60sec; much higher values like 3600 seconds (1h) are feasible for non-Azure K8S
    # watchServerTimeout: 3600
    #
    # watchClientTimeout: is a client-side timeout, configuring your local socket.
    # If you have a network outage dropping all packets with no RST/FIN,
    # this is how long your client waits before realizing & dropping the connection.
    # defaults to 66sec (sic!)
    # watchClientTimeout: 60
    #
    # provider configuration that lets grafana manage the dashboards
    provider:
      # name of the provider, should be unique
      name: sidecarProvider
      # orgid as configured in grafana
      orgid: 1
      # folder in which the dashboards should be imported in grafana
      folder: ''
      # type of the provider
      type: file
      # disableDelete to activate a import-only behaviour
      disableDelete: false
      # allow updating provisioned dashboards from the UI
      allowUiUpdates: false
      # allow Grafana to replicate dashboard structure from filesystem
      foldersFromFilesStructure: false
    # Additional dashboard sidecar volume mounts
    extraMounts: []
    # Sets the size limit of the dashboard sidecar emptyDir volume
    sizeLimit: {}
  datasources:
    enabled: false
    # Additional environment variables for the datasourcessidecar
    env: {}
    envValueFrom: {}
    # Do not reprocess already processed unchanged resources on k8s API reconnect.
    # ignoreAlreadyProcessed: true
    # label that the configmaps with datasources are marked with
    label: grafana_datasource
    # value of label that the configmaps with datasources are set to
    labelValue: ""
    # Log level. Can be one of: DEBUG, INFO, WARN, ERROR, CRITICAL.
    # logLevel: INFO
    # If specified, the sidecar will search for datasource config-maps inside this namespace.
    # Otherwise the namespace in which the sidecar is running will be used.
    # It's also possible to specify ALL to search in all namespaces
    searchNamespace: null
    # Method to use to detect ConfigMap changes. With WATCH the sidecar will do a WATCH requests, with SLEEP it will list all ConfigMaps, then sleep for 60 seconds.
    watchMethod: WATCH
    # search in configmap, secret or both
    resource: both
    # watchServerTimeout: request to the server, asking it to cleanly close the connection after that.
    # defaults to 60sec; much higher values like 3600 seconds (1h) are feasible for non-Azure K8S
    # watchServerTimeout: 3600
    #
    # watchClientTimeout: is a client-side timeout, configuring your local socket.
    # If you have a network outage dropping all packets with no RST/FIN,
    # this is how long your client waits before realizing & dropping the connection.
    # defaults to 66sec (sic!)
    # watchClientTimeout: 60
    #
    # Endpoint to send request to reload datasources
    reloadURL: "http://localhost:3000/api/admin/provisioning/datasources/reload"
    # Absolute path to shell script to execute after a datasource got reloaded
    script: null
    skipReload: false
    # This is needed if skipReload is true, to load any datasources defined at startup time.
    # Deploy the datasources sidecar as an initContainer.
    initDatasources: false
    # Sets the size limit of the datasource sidecar emptyDir volume
    sizeLimit: {}
  plugins:
    enabled: false
    # Additional environment variables for the plugins sidecar
    env: {}
    # Do not reprocess already processed unchanged resources on k8s API reconnect.
    # ignoreAlreadyProcessed: true
    # label that the configmaps with plugins are marked with
    label: grafana_plugin
    # value of label that the configmaps with plugins are set to
    labelValue: ""
    # Log level. Can be one of: DEBUG, INFO, WARN, ERROR, CRITICAL.
    # logLevel: INFO
    # If specified, the sidecar will search for plugin config-maps inside this namespace.
    # Otherwise the namespace in which the sidecar is running will be used.
    # It's also possible to specify ALL to search in all namespaces
    searchNamespace: null
    # Method to use to detect ConfigMap changes. With WATCH the sidecar will do a WATCH requests, with SLEEP it will list all ConfigMaps, then sleep for 60 seconds.
    watchMethod: WATCH
    # search in configmap, secret or both
    resource: both
    # watchServerTimeout: request to the server, asking it to cleanly close the connection after that.
    # defaults to 60sec; much higher values like 3600 seconds (1h) are feasible for non-Azure K8S
    # watchServerTimeout: 3600
    #
    # watchClientTimeout: is a client-side timeout, configuring your local socket.
    # If you have a network outage dropping all packets with no RST/FIN,
    # this is how long your client waits before realizing & dropping the connection.
    # defaults to 66sec (sic!)
    # watchClientTimeout: 60
    #
    # Endpoint to send request to reload plugins
    reloadURL: "http://localhost:3000/api/admin/provisioning/plugins/reload"
    # Absolute path to shell script to execute after a plugin got reloaded
    script: null
    skipReload: false
    # Deploy the datasource sidecar as an initContainer in addition to a container.
    # This is needed if skipReload is true, to load any plugins defined at startup time.
    initPlugins: false
    # Sets the size limit of the plugin sidecar emptyDir volume
    sizeLimit: {}
  notifiers:
    enabled: false
    # Additional environment variables for the notifierssidecar
    env: {}
    # Do not reprocess already processed unchanged resources on k8s API reconnect.
    # ignoreAlreadyProcessed: true
    # label that the configmaps with notifiers are marked with
    label: grafana_notifier
    # value of label that the configmaps with notifiers are set to
    labelValue: ""
    # Log level. Can be one of: DEBUG, INFO, WARN, ERROR, CRITICAL.
    # logLevel: INFO
    # If specified, the sidecar will search for notifier config-maps inside this namespace.
    # Otherwise the namespace in which the sidecar is running will be used.
    # It's also possible to specify ALL to search in all namespaces
    searchNamespace: null
    # Method to use to detect ConfigMap changes. With WATCH the sidecar will do a WATCH requests, with SLEEP it will list all ConfigMaps, then sleep for 60 seconds.
    watchMethod: WATCH
    # search in configmap, secret or both
    resource: both
    # watchServerTimeout: request to the server, asking it to cleanly close the connection after that.
    # defaults to 60sec; much higher values like 3600 seconds (1h) are feasible for non-Azure K8S
    # watchServerTimeout: 3600
    #
    # watchClientTimeout: is a client-side timeout, configuring your local socket.
    # If you have a network outage dropping all packets with no RST/FIN,
    # this is how long your client waits before realizing & dropping the connection.
    # defaults to 66sec (sic!)
    # watchClientTimeout: 60
    #
    # Endpoint to send request to reload notifiers
    reloadURL: "http://localhost:3000/api/admin/provisioning/notifications/reload"
    # Absolute path to shell script to execute after a notifier got reloaded
    script: null
    skipReload: false
    # Deploy the notifier sidecar as an initContainer in addition to a container.
    # This is needed if skipReload is true, to load any notifiers defined at startup time.
    initNotifiers: false
    # Sets the size limit of the notifier sidecar emptyDir volume
    sizeLimit: {}

## Override the deployment namespace
##
namespaceOverride: ""

## Number of old ReplicaSets to retain
##
revisionHistoryLimit: 10

## Add a seperate remote image renderer deployment/service
imageRenderer:
  deploymentStrategy: {}
  # Enable the image-renderer deployment & service
  enabled: false
  replicas: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPU: "60"
    targetMemory: ""
    behavior: {}
  image:
    # -- The Docker registry
    registry: docker.io
    # image-renderer Image repository
    repository: grafana/grafana-image-renderer
    # image-renderer Image tag
    tag: latest
    # image-renderer Image sha (optional)
    sha: ""
    # image-renderer ImagePullPolicy
    pullPolicy: Always
  # extra environment variables
  env:
    HTTP_HOST: "0.0.0.0"
    # RENDERING_ARGS: --no-sandbox,--disable-gpu,--window-size=1280x758
    # RENDERING_MODE: clustered
    # IGNORE_HTTPS_ERRORS: true

  ## "valueFrom" environment variable references that will be added to deployment pods. Name is templated.
  ## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#envvarsource-v1-core
  ## Renders in container spec as:
  ##   env:
  ##     ...
  ##     - name: <key>
  ##       valueFrom:
  ##         <value rendered as YAML>
  envValueFrom: {}
    #  ENV_NAME:
    #    configMapKeyRef:
    #      name: configmap-name
    #      key: value_key

  # image-renderer deployment serviceAccount
  serviceAccountName: ""
  # image-renderer deployment securityContext
  securityContext: {}
  # image-renderer deployment container securityContext
  containerSecurityContext:
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop: ['ALL']
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  ## image-renderer pod annotation
  podAnnotations: {}
  # image-renderer deployment Host Aliases
  hostAliases: []
  # image-renderer deployment priority class
  priorityClassName: ''
  service:
    # Enable the image-renderer service
    enabled: true
    # image-renderer service port name
    portName: 'http'
    # image-renderer service port used by both service and deployment
    port: 8081
    targetPort: 8081
    # Adds the appProtocol field to the image-renderer service. This allows to work with istio protocol selection. Ex: "http" or "tcp"
    appProtocol: ""
  serviceMonitor:
    ## If true, a ServiceMonitor CRD is created for a prometheus operator
    ## https://github.com/coreos/prometheus-operator
    ##
    enabled: false
    path: /metrics
    #  namespace: monitoring  (defaults to use the namespace this chart is deployed to)
    labels: {}
    interval: 1m
    scheme: http
    tlsConfig: {}
    scrapeTimeout: 30s
    relabelings: []
    # See: https://doc.crds.dev/github.com/prometheus-operator/kube-prometheus/monitoring.coreos.com/ServiceMonitor/v1@v0.11.0#spec-targetLabels
    targetLabels: []
      # - targetLabel1
      # - targetLabel2
  # If https is enabled in Grafana, this needs to be set as 'https' to correctly configure the callback used in Grafana
  grafanaProtocol: http
  # In case a sub_path is used this needs to be added to the image renderer callback
  grafanaSubPath: ""
  # name of the image-renderer port on the pod
  podPortName: http
  # number of image-renderer replica sets to keep
  revisionHistoryLimit: 10
  networkPolicy:
    # Enable a NetworkPolicy to limit inbound traffic to only the created grafana pods
    limitIngress: true
    # Enable a NetworkPolicy to limit outbound traffic to only the created grafana pods
    limitEgress: false
    # Allow additional services to access image-renderer (eg. Prometheus operator when ServiceMonitor is enabled)
    extraIngressSelectors: []
  resources: {}
#   limits:
#     cpu: 100m
#     memory: 100Mi
#   requests:
#     cpu: 50m
#     memory: 50Mi
  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  #
  nodeSelector: {}

  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []

  ## Affinity for pod assignment (evaluated as template)
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}

  ## Use an alternate scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName: "default-scheduler"

networkPolicy:
  ## @param networkPolicy.enabled Enable creation of NetworkPolicy resources. Only Ingress traffic is filtered for now.
  ##
  enabled: false
  ## @param networkPolicy.allowExternal Don't require client label for connections
  ## The Policy model to apply. When set to false, only pods with the correct
  ## client label will have network access to  grafana port defined.
  ## When true, grafana will accept connections from any source
  ## (with the correct destination port).
  ##
  ingress: true
  ## @param networkPolicy.ingress When true enables the creation
  ## an ingress network policy
  ##
  allowExternal: true
  ## @param networkPolicy.explicitNamespacesSelector A Kubernetes LabelSelector to explicitly select namespaces from which traffic could be allowed
  ## If explicitNamespacesSelector is missing or set to {}, only client Pods that are in the networkPolicy's namespace
  ## and that match other criteria, the ones that have the good label, can reach the grafana.
  ## But sometimes, we want the grafana to be accessible to clients from other namespaces, in this case, we can use this
  ## LabelSelector to select these namespaces, note that the networkPolicy's namespace should also be explicitly added.
  ##
  ## Example:
  ## explicitNamespacesSelector:
  ##   matchLabels:
  ##     role: frontend
  ##   matchExpressions:
  ##    - {key: role, operator: In, values: [frontend]}
  ##
  explicitNamespacesSelector: {}
  ##
  ##
  ##
  ##
  ##
  ##
  egress:
    ## @param networkPolicy.egress.enabled When enabled, an egress network policy will be
    ## created allowing grafana to connect to external data sources from kubernetes cluster.
    enabled: false
    ##
    ## @param networkPolicy.egress.blockDNSResolution When enabled, DNS resolution will be blocked
    ## for all pods in the grafana namespace.
    blockDNSResolution: false
    ##
    ## @param networkPolicy.egress.ports Add individual ports to be allowed by the egress
    ports: []
    ## Add ports to the egress by specifying - port: <port number>
    ## E.X.
    ## - port: 80
    ## - port: 443
    ##
    ## @param networkPolicy.egress.to Allow egress traffic to specific destinations
    to: []
    ## Add destinations to the egress by specifying - ipBlock: <CIDR>
    ## E.X.
    ## to:
    ##  - namespaceSelector:
    ##    matchExpressions:
  ##    - {key: role, operator: In, values: [grafana]}
  ##
  ##
  ##
  ##
  ##

# Enable backward compatibility of kubernetes where version below 1.13 doesn't have the enableServiceLinks option
enableKubeBackwardCompatibility: false
useStatefulSet: false
# Create a dynamic manifests via values:
extraObjects: []
  # - apiVersion: "kubernetes-client.io/v1"
  #   kind: ExternalSecret
  #   metadata:
  #     name: grafana-secrets
  #   spec:
  #     backendType: gcpSecretsManager
  #     data:
  #       - key: grafana-admin-password
  #         name: adminPassword

# assertNoLeakedSecrets is a helper function defined in _helpers.tpl that checks if secret
# values are not exposed in the rendered grafana.ini configmap. It is enabled by default.
#
# To pass values into grafana.ini without exposing them in a configmap, use variable expansion:
# https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#variable-expansion
#
# Alternatively, if you wish to allow secret values to be exposed in the rendered grafana.ini configmap,
# you can disable this check by setting assertNoLeakedSecrets to false.
assertNoLeakedSecrets: true

